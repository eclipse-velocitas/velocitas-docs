[{"body":"Every Vehicle App repo comes with a .velocitas.json which is the project configuration of your app. It holds references to the packages and their respective versions you are using in your project.\nHere is an example of this configuration:\n{ \"packages\": [ { \"name\": \"devenv-devcontainer-setup\", \"version\": \"v1.0.0\" }, { \"name\": \"devenv-runtimes\", \"version\": \"v1.0.0\" } ], \"variables\": { \"foo\": \"bar\", \"baz\": 2 } } More detailed information and explanation about the project configuration and fields of the .velocitas.json can be found here.\nNext steps Lifecycle Management: Usage of Packages Lifecycle Management: Development of Packages ","categories":"","description":"Learn everything about Velocitas project configuration.\n","excerpt":"Learn everything about Velocitas project configuration.\n","ref":"/velocitas-docs/docs/concepts/lifecycle_management/project-configuration/","tags":"","title":"Project Configuration"},{"body":"The open and web based digital.auto offers a rapid prototyping environment to explore and validate ideas of a vehicle app. digital.auto interacts with different vehicle sensors and actuators via standardized APIs specified by the COVESA Vehicle Signal Specification (VSS) without custom setup requirements. Within the platform you can:\nbrowse, navigate and enhance vehicle signals (sensors, actuators and branches) in the Vehicle API Catalogue mapped to a 3D model of the vehicle build vehicle app prototypes in the browser using Python and the Vehicle API Catalogue test the vehicle app prototype in a dashboard with 3D animation for API calls create new plugins, which usually represent UX widgets or remote server communication to enhance the vehicle mockup experience in the playground collect and evaluate user feedback to prioritize your development portfolio Start the journey of a Vehicle App As first step open digital.auto, select Get Started in the prototyping section of the landing page and use the Vehicle Model of your choice.\nYou now have the possibility to browse existing vehicle signals for the selected vehicle model which you can use for prototyping your Vehicle App by clicking on Vehicle APIs.\nAdd additional Vehicle APIs If the ideation of your vehicle app prototype comes with any new Vehicle API which is not part of the standard VSS you also have the option to include it into your pre-selected model by clicking the + New Wishlist API button. After filling out all required fields, simply click the create button - this will commit the new API to the existing model.\nNote For this feature, a digital.auto account is required. Get in touch with us or the digital.auto team in case you want to explore this feature Prototype an idea of a Vehicle App The next step would be to prototype your idea. To do so:\nClick on Prototype Library of your selected model, Create a new prototype, by clicking on New Prototype and filling out the information or select one from the list, Click on the Open button, Go to the Code section and start your prototype right away. Test the prototype of a Vehicle App Testing of your prototype starts in the Run section. You will find a dashboard consisting all vehicle and application components similar to mockups. The control center on the right side has an integrated terminal showing all of your prototyped outputs as well as a list of all called VSS API’s. The Run button executes all your prototype code from top to bottom. The Debug button allows you to step through your prototype line by line.\nTo get started quickly, the digital.auto team has added a number of widgets to simulate related elements of the vehicle – like doors, seats, light, etc. – and made them available in the playground.\nFeel free to add your own Plugins with widgets for additional car features (maybe an antenna waving a warm “welcome”…?).\nTransfer your prototype into a Velocitas Vehicle App In the previous steps you started with envisioning and prototyping your Vehicle App idea and tested it against mocked vehicle components in digital.auto. The Velocitas team provides a project generator to transfer the prototype from digital.auto into your own development environment where you are able to test it with real Vehicle Services. The generator creates a Vehicle App GitHub repository using your prototype code based on our vehicle-app-python-template. In the ‘Code’ section of your prototype in digital.auto you have the button ‘Create Eclipse Velocitas Project’.\nAfter pressing the button you will be forwarded to GitHub. Login with your GitHub Account and authorize velocitas-project-generator to create the repository for you. You will be redirected to digital.auto and asked for a repository name (equals to the name of the app). By clicking on “Create repository”:\nthe project generator takes over your prototype code the code is adapted to the structure in the vehicle-app-python-template a new private repository under your specified GitHub User will be created. A successful generation of the repository is followed by a pop-up dialogue with the URL of your repository.\nAmong other things the newly created repository will contain:\nFiles Description /app/src/main.py Main class of the app, containing your modified prototype code /app/AppManifest.json Settings file defining required services /app/requirements.txt Requirements file defining all python dependencies /.devcontainer/ Required scripts and settings to setup the devcontainer in Microsoft Visual Studio Code /.github/workflows/ All required CI/CD pipelines to build, test and deploy the vehicle application as container image to the GitHub container registry /gen/vehicle_model/ The generated model classes. If your prototype includes any exceptional API you added beforehand our automated vehicle model lifecycle takes care of handling the custom VSS vspec file coming from digital.auto and generates a vehicle_model when starting the devContainer Your prototype Vehicle App transferred into a GitHub repository is now ready to be extended. Clone your newly created repository and open the Vehicle App in Microsoft Visual Studio Code and start to extend it.\nYou can proceed with the following topics:\nStarting development environment Vehicle App Development ","categories":"","description":"Learn how to start a prototype with the playground of digital.auto and integrate it into Velocitas.\n","excerpt":"Learn how to start a prototype with the playground of digital.auto and …","ref":"/velocitas-docs/docs/tutorials/prototyping/digital_auto/","tags":"","title":"Prototyping with Digital.Auto"},{"body":"","categories":"","description":"Learn everything about Velocitas packages.\n","excerpt":"Learn everything about Velocitas packages.\n","ref":"/velocitas-docs/docs/concepts/lifecycle_management/packages/","tags":"","title":"Packages"},{"body":" We recommend that you make yourself familiar with the Vehicle App SDK first, before going through this tutorial.\nThe following information describes how to develop and test the sample Vehicle App that is included in the template repository. You will learn how to use the Vehicle App SDK and how to interact with the Vehicle Model.\nOnce you have completed all steps, you will have a solid understanding of the development workflow and you will be able to reuse the template repository for your own Vehicle App development project.\nDevelop your first Vehicle App This section describes how to develop your first Vehicle App. Before you start building a new Vehicle App, make sure you have already read this manual:\nSetup and Explore Development Environment Once you have established your development environment, you will be able to start developing your first Vehicle App.\nFor this tutorial, you will recreate the Vehicle App that is included with the SDK repository: The Vehicle App allows to change the positions of the seats in the car and also provide their current positions to other applications.\nA detailed explanation of the use case and the example is available here.\nAt first, you have to create the main python script called main.py in /app/src. All the relevant code for new Vehicle App goes there. Afterwards, there are several steps you need to consider when developing the app:\nManage your imports Enable logging Initialize your class Start the app Manage your imports Before you start development in the main.py you just created, it will be necessary to include the imports required, which you will understand better later through the development:\nimport asyncio import json import logging import signal import grpc from sdv.util.log import ( # type: ignore get_opentelemetry_log_factory, get_opentelemetry_log_format, ) from sdv.vehicle_app import VehicleApp, subscribe_topic from vehicle import Vehicle, vehicle # type: ignore from sdv_model.proto.seats_pb2 import BASE, SeatLocation # type: ignore Enable logging The following logging configuration applies the default log format provided by the SDK and sets the log level to INFO:\nlogging.setLogRecordFactory(get_opentelemetry_log_factory()) logging.basicConfig(format=get_opentelemetry_log_format()) logging.getLogger().setLevel(\"INFO\") logger = logging.getLogger(__name__) Initialize your class The main class of your new Vehicle App needs to inherit the VehicleApp provided by the SDK.\nclass MyVehicleApp(VehicleApp): In class initialization, you have to pass an instance of the Vehicle Model:\ndef __init__(self, vehicle_client: Vehicle): super().__init__() self.Vehicle = vehicle_client We save the vehicle object to use it in our app. Now, you have initialized the app and can continue developing relevant methods.\nStart the app Here’s an example of how to start the MyVehicleApp App that we just developed:\nasync def main(): \"\"\"Main function\"\"\" logger.info(\"Starting my VehicleApp...\") vehicle_app = MyVehicleApp(vehicle) await vehicle_app.run() LOOP = asyncio.get_event_loop() LOOP.add_signal_handler(signal.SIGTERM, LOOP.stop) LOOP.run_until_complete(main()) LOOP.close() The app is now running. In order to use it properly, we will enhance the app with more features in the next sections.\nVehicle Model Access In order to facilitate the implementation, the whole vehicle is abstracted into model classes. Please check tutorial about creating models for more details about this topic. In this section, the focus is on using the models.\nThe first thing you need to do is to get access to the Vehicle Model. If you derived your project repository from our template, we already provide a generated model installed as a Python package named vehicle. Hence, in most cases no additional setup is necessary. How to tailor the model to your needs or how you could get access to vehicle services is described in the tutorial linked above.\nIf you want to access a single DataPoint for the vehicle speed, this can be done via\nvehicle_speed = await self.Vehicle.Speed.get() As the get() method of the DataPoint-class there is a coroutine you have to use the await keyword when using it.\nIf you want to get deeper inside the vehicle, to access a single seat for example, you just have to go the model-chain down:\nself.DriverSeatPosition = await self.vehicle_client.Cabin.Seat.Row1.Pos1.Position.get() Subscription to DataPoints If you want to get notified about changes of a specific DataPoint, you can subscribe to this event, e.g. as part of the on_start() method in your app.\nasync def on_start(self): \"\"\"Run when the vehicle app starts\"\"\" await self.Vehicle.Cabin.Seat.Row(1).Pos(1).Position.subscribe( self.on_seat_position_changed ) Every Datapoint provides a .subscribe() method that allows for providing a callback function which will be invoked on every datapoint update. Subscribed data is available in the respective DataPointReply object and need to be accessed via the reference to the subscribed datapoint. The returned object is of type TypedDataPointResult which holds the value of the data point and the timestamp at which the value was captured by the data broker. Therefore the on_seat_position_changed callback function needs to be implemented like this:\nasync def on_seat_position_changed(self, data: DataPointReply): # handle the event here response_topic = \"seatadjuster/currentPosition\" position = data.get(self.Vehicle.Cabin.Seat.Row(1).Pos(1).Position).value # ... Note The SDK also supports annotations for subscribing to datapoint changes with @subscribe_data_points defined by the whole path to the DataPoint of interest.\n@subscribe_data_points(\"Vehicle.Cabin.Seat.Row1.Pos1.Position\") async def on_vehicle_seat_change(self, data: DataPointReply): response_topic = \"seatadjuster/currentPosition\" response_data = {\"position\": data.get(self.Vehicle.Cabin.Seat.Row1.Pos1.Position).value} await self.publish_mqtt_event(response_topic, json.dumps(response_data)) Similarly, subscribed data is available in the respective DataPointReply object and needs to be accessed via the reference to the subscribed datapoint.\nServices Note Services are not supported by our automated vehicle model lifecycle for the time being. If you need access to services please read here how you can create a model and add services to it manually. Services are used to communicate with other parts of the vehicle via remote function calls (RPC). Please read the basics about them here.\nThe following lines show you how to use the MoveComponent() method of the SeatService from the vehicle model:\nlocation = SeatLocation(row=1, index=1) await self.vehicle_client.Cabin.SeatService.MoveComponent( location, BASE, data[\"position\"] ) In order to know which seat to move, you have to pass a SeatLocation object as the first parameter. The second argument specifies the component to be moved. The possible components are defined in the proto-files. The last parameter to be passed into the method is the final position of the component.\nMake sure to use the await keyword when calling service methods, since these methods are coroutines.\nMQTT Interaction with other Vehicle Apps or the cloud is enabled by using Mosquitto MQTT Broker. The MQTT broker runs inside a docker image, which is started automatically after starting the DevContainer.\nIn the quickstart section about the Vehicle App, you already tested sending MQTT messages to the app. In the previous sections, you generally saw how to use Vehicle Models, DataPoints and GRPC Services. In this section, you will learn how to combine them with MQTT.\nIn order to receive and process MQTT messages inside your app, simply use the @subscribe_topic annotations from the SDK for an additional method on_set_position_request_received() you have to implement:\n@subscribe_topic(\"seatadjuster/setPosition/request\") async def on_set_position_request_received(self, data_str: str) -\u003e None: data = json.loads(data_str) response_topic = \"seatadjuster/setPosition/response\" response_data = {\"requestId\": data[\"requestId\"], \"result\": {}} # ... The on_set_position_request_received method will now be invoked every time a message is published to the subscribed topic \"seatadjuster/setPosition/response\". The message data (string) is provided as parameter. In the example above the data is parsed to json (data = json.loads(data_str)).\nIn order to publish data to topics, the SDK provides the appropriate convenience method: self.publish_mqtt_event() which will be added to the on_seat_position_changed callback function from before.\nasync def on_seat_position_changed(self, data: DataPointReply): response_topic = \"seatadjuster/currentPosition\" position = data.get(self.Vehicle.Cabin.Seat.Row(1).Pos(1).Position).value await self.publish_mqtt_event( response_topic, json.dumps({\"position\": position}), ) The above example illustrates how one can easily publish messages. In this case, every time the seat position changes, the new position is published to seatadjuster/currentPosition\nYour main.py should now have a full implementation for class MyVehicleApp(VehicleApp): containing:\n__init__() on_start() on_seat_position_changed() on_set_position_request_received() and last but not least a main() method to run the app.\nCheck the seat-adjuster example to see a more detailed implementation including error handling.\nUnitTests Unit testing is an important part of the development, so let’s have a look at how to do that. You can find some example tests in /app/tests/unit. First, you have to import the relevant packages for unit testing and everything you need for your implementation:\nfrom unittest import mock import pytest from sdv.vehicle_app import VehicleApp from sdv_model.Cabin.SeatService import SeatService # type: ignore from sdv_model.proto.seats_pb2 import BASE, SeatLocation # type: ignore @pytest.mark.asyncio async def test_for_publish_to_topic(): # Disable no-value-for-parameter, seems to be false positive with mock lib with mock.patch.object( VehicleApp, \"publish_mqtt_event\", new_callable=mock.AsyncMock, return_value=-1 ): response = await VehicleApp.publish_mqtt_event( str(\"sampleTopic\"), get_sample_request_data() # type: ignore ) assert response == -1 def get_sample_request_data(): return {\"position\": 330, \"requestId\": \"123456789\"} Looking at a test you notice the annotation @pytest.mark.asyncio. This is required if the test is defined as a coroutine. The next step is to create a mock from all the external dependencies. The method takes 4 arguments: first is the object to be mocked, second the method for which you want to modify the return value, third a callable and the last argument is the return value. After creating the mock, you can test the method and check the response. Use asserts to make your test fail if the response does not match.\nSee the results Once the implementation is done, it is time to run and debug the app.\nRun your App In order to run the app make sure the devenv-runtimes package is part of your .velocitas.json (which should be the default) and the runtime is up and running. Read more about it in the run runtime services section.\nNow chose one of the options to start the VehicleApp under development (including Dapr sidecar if middleware type is Dapr):\nPress F5 or:\nPress F1 Select command Tasks: Run Task Select Local Runtime - Run VehicleApp The following dapr configuration is part of the devenv-runtimes package (WIP: TBD) You already have seen this command and how to check if it is working in the general setup.\nFor now, you just need to know that these parameters are needed to make everything work together.\nThe config.yaml has to be placed in the folder called .daprand has the following content:\napiVersion: dapr.io/v1alpha1 kind: Configuration metadata: name: config spec: tracing: samplingRate: \"1\" zipkin: endpointAddress: http://localhost:9411/api/v2/spans features: - name: proxy.grpc enabled: true An important part is the enabling of the GRPC proxy, to make the communication work.\nInside the .dapr folder you find another folder called components. There you only find one configuration file for the MQTT communication with the following content:\napiVersion: dapr.io/v1alpha1 kind: Component metadata: name: mqtt-pubsub namespace: default spec: type: pubsub.mqtt version: v1 metadata: - name: url value: \"mqtt://localhost:1883\" - name: qos value: 1 - name: retain value: \"false\" - name: cleanSession value: \"false\" If you want to know more about dapr and the configuration, please visit https://dapr.io\nDebug your Vehicle App In the introduction about debugging, you saw how to start a debugging session. In this section, you will learn what is happening in the background.\nThe debug session launch settings are already prepared for the VehicleApp in /.vscode/launch.json.\n\"configurations\": [ { \"type\": \"python\", \"justMyCode\": false, \"request\": \"launch\", \"name\": \"VehicleApp\", \"program\": \"${workspaceFolder}/app/src/main.py\", \"console\": \"integratedTerminal\", \"preLaunchTask\": \"dapr-sidecar-start\", \"postDebugTask\": \"dapr-sidecar-stop\", \"env\": { \"APP_PORT\": \"50008\", \"DAPR_HTTP_PORT\": \"3500\", \"DAPR_GRPC_PORT\": \"50001\", \"VEHICLEDATABROKER_DAPR_APP_ID\": \"vehicledatabroker\" } } ] We specify which python-script to run using the program key. With the preLaunchTask and postDebugTask keys, you can also specify tasks to run before or after debugging. In this example, DAPR is set up to start the app before and stop it again after debugging. Below you can see the 2 tasks to find in /.vscode/tasks.json.\n{ \"label\": \"dapr-sidecar-start\", \"detail\": \"Start Dapr sidecar (with dapr run) to be present for debugging the VehicleApp (used by launch config).\", \"type\": \"shell\", \"command\": \"velocitas exec runtime-local run-dapr-sidecar vehicleapp --app-port 50008 --dapr-grpc-port 50001 --dapr-http-port 3500\", \"group\": \"none\", \"isBackground\": true, \"presentation\": { \"close\": true, \"reveal\": \"never\" }, \"problemMatcher\": { \"pattern\": [ { \"regexp\": \".\", \"file\": 1, \"location\": 2, \"message\": 3 } ], \"background\": { \"activeOnStart\": true, \"beginsPattern\": \"^You're up and running! Dapr logs will appear here.\", \"endsPattern\": \".\" } }, \"hide\": true } { \"label\": \"dapr-sidecar-stop\", \"detail\": \"Stop Dapr sidecar after finish debugging the VehicleApp (used by launch config).\", \"type\": \"shell\", \"command\": [ \"dapr stop --app-id vehicleapp\" ], \"presentation\": { \"close\": true, \"reveal\": \"never\" }, \"hide\": true }, You can adapt the configuration in /.vscode/launch.json to your needs (e.g., change the ports, add new tasks) or even add a completely new configuration for another Vehicle App.\nOnce you are done, you have to switch to the debugging tab (sidebar on the left) and select your configuration using the dropdown on the top. You can now start the debug session by clicking the play button or F5. Debugging is now as simple as in every other IDE, just place your breakpoints and follow the flow of your Vehicle App.\nNext steps Concept: SDK Overview Tutorial: Deploy runtime services in Kubernetes Tutorial: Start runtime services locally Tutorial: Creating a Python Vehicle Model Tutorial: Develop and run integration tests for a Vehicle App Concept: Deployment Model Tutorial: Deploy a Python Vehicle App with Helm ","categories":"","description":"Learn how to develop and test the _Vehicle App_ using Python.\n","excerpt":"Learn how to develop and test the _Vehicle App_ using Python.\n","ref":"/velocitas-docs/docs/tutorials/vehicle-app-development/tutorial_how_to_create_a_vehicle_app_python/","tags":"","title":"Python Vehicle App Development"},{"body":"The following page describes how to set up and configure the Development Container (DevContainer) and how to build, customize and test the sample Vehicle App included in this repository. You will learn how to use the Vehicle App SDK, interact with the vehicle API and work with CI/CD using the pre-configured GitHub Workflows that come with the template repository.\nOnce you have completed all steps, you will have a solid understanding of the Development Workflow, and you will be able to reuse the Template Repository for your own Vehicle App development project.\nNote Before you start, we recommend familiarizing yourself with our Basic Concept to understand all mentioned terms. Prerequisites Please make sure you did all the prerequisite steps to create comprehensive Development Environment for your Vehicle App :\nInstall VS Code\nInstall a working container runtime\nAdd Remote-Containers extension via the marketplace or using the command line\ncode --install-extension ms-vscode-remote.remote-containers How to create your Vehicle App Repository? For the Organization and Vehicle App repository the name MyOrg/MyFirstVehicleApp is used as a reference during the rest of the document.\nYou can create your own repository using a provided template or start prototyping via Digital.Auto.\nUsing Template Digital.Auto Create your own repository copy from the template repository of your choice:\nPython C++ by clicking the green button Use this template. You don’t have to include all branches. For more information on Template Repositories take a look at this GitHub Tutorial.\nTo learn how to start prototyping with the playground of Digital.Auto and integrate it into Velocitas please take a look here\nHow to start to develop? In the following chapter you will learn different possibilities to start developing based on your repository. Basically you can work on your own machine using just VS Codes DevContainer or you can set up the environment on a remote agent, using GitHub Codespaces.\nVS Code GitHub Codespaces The VS Code DevContainer makes possible to package a complete Vehicle App development environment, including VS Code extensions, Vehicle App SDK, Vehicle App Runtimes and all other development and testing tools into a container which is started directly in VS Code.\nProxy Configuration\nA non proxy configuration is used by default. If you are working behind a corporate proxy you will need to specify proxy settings: Working behind a proxy\nWith following steps you will clone and set up your development environment on your own machine using just VS Code.\nClone created MyOrg/MyFirstVehicleApp repository locally using your favorite Git Tool Switch the directory to the cloned repository folder, e.g. $ cd MyFirstVehicleApp Open the repository in VS Code via $ code . or via VS Code user interface. A popup appears in the lower right corner with the button Reopen in Container. Click on Reopen in Container. If the popup does not appear, you can also hit F1 and perform the command Dev-Containers: Reopen in Container Wait for the container to be set up The first initializing of the container will take some minutes to build the image and provision all the integrated tools.\nIf the DevContainer build process fails, press F1 and run the command Dev-Containers: Rebuild Container Without Cache. The DevContainer is using the docker-in-docker feature to run docker containers within the container.\nOne of the possibilities to use your newly created repository is to use it inside a GitHub Codespace. You can either try it out directly in the browser or also use it inside VS Code. The main thing to remember is that everything is executed on a remote agent and the browser or VS Code just acts as a “thin-client”.\nTo get started with GitHub Codespaces, you just have to follow a few steps:\nOpen your repository on GitHub (e.g. https://github.com/MyOrg/MyFirstVehicleApp) Click on the green Code button and select Codespaces on the top Configure your Codespace if needed (defaults to the main branch and a standard agent) Click on create A new window will open where you can see logs for setting up the container. On this window you could now also choose to work with VS Code. The environment remains on a remote agent and VS Code establishes a connection to this machine.\nOnce everything is set up in the Codespace, you can work with it in the same way as with the normal DevContainer inside VS Code.\nBe careful with using GitHub Codespaces in browser and VS Code locally at the same time: Tasks that are started using a browser session will not show in VS Code environment and vice versa. This might lead to problems.\nYou can find more information about the Vehicle App Development in the respective pages.\nHow to start the runtime services? The runtime services (like KUKSA Data Broker or Vehicle Services) are required to develop vehicle apps and run integration tests.\nCurrently supported possibilities are starting the services locally and in a Kubernetes (K3D) cluster.\nLocal Runtime K3D Runtime A VS Code task called Local Runtime - Up is available to start all necessary services in the correct order.\nPress F1 Select command Tasks: Run Task Select Local Runtime - Up You should see the task Local Runtime - Up being executed on a separate VS Code terminal with the following content:\n$ velocitas exec runtime-local up Hint: Log files can be found in your workspace's logs directory \u003e mqtt-broker running \u003e vehicledatabroker running \u003e seatservice running \u003e feedercan running ✅ Runtime is ready to use! Simply press Ctrl + C to stop the runtime.\nA VS Code task called K3D Runtime - Up is available to start all necessary services in the correct order.\nPress F1 Select command Tasks: Run Task Select K3D Runtime - Up You should see the task K3D Runtime - Up being executed on a separate VS Code terminal with the following content:\n$ velocitas exec runtime-k3d up Hint: Log files can be found in your workspace's logs directory \u003e Checking K3D registry... created. \u003e Creating cluster with proxy configuration. \u003e Checking K3D cluster... created. \u003e Checking zipkin deployment... deployed. \u003e Checking dapr... initialized. ✅ Configuring controlplane for k3d... \u003e Deploying runtime... installed. ✅ Starting k3d runtime... You need to perform task K3D Runtime - Down to properly stop runtime activities.\nMore information about the runtimes are available here.\nHow to debug your Vehicle App? Warning Debugging functionality is only available when using the Local Runtime. Both given examples are available as part of template. Now that the runtime services are all up and running, let’s start a debug session for the Vehicle App .\nPython C++ Open the main source file /app/src/main.py and set a breakpoint in the given method on_get_speed_request_received Press F5 to start a debug session of the Vehicle App and see the log output on the DEBUG CONSOLE To trigger this breakpoint, let’s send a message to the Vehicle App using the mqtt broker that is running in the background.\nOpen VSMqtt extension in VS Code and connect to mosquitto (local) Set Subscribe Topic = sampleapp/getSpeed/response and click subscribe Set Publish Topic = sampleapp/getSpeed Press publish with an empty payload field. Open the main source file /app/src/VehicleApp.cpp and set a breakpoint in the given method onSetPositionRequestReceived Press F5 to start a debug session of the Vehicle App and see the log output on the DEBUG CONSOLE To trigger this breakpoint, let’s send a message to the Vehicle App using the mqtt broker that is running in the background.\nOpen VSMqtt extension in VS Code and connect to mosquitto (local) Set Subscribe Topic = seatadjuster/setPosition/response and click subscribe Set Subscribe Topic = seatadjuster/currentPosition and click subscribe Set Publish Topic = seatadjuster/setPosition/request Set and publish a dummy payload: { \"position\": 300, \"requestId\": \"xyz\" } Now your breakpoint in the Vehicle App gets hit and you can inspect everything in your debug session. After resuming execution (F5), a response from your Vehicle App is published to the response topic. You can see the response in the MQTT window.\nHow to trigger the CI Workflow? The provided GitHub workflows are used to build the container image for the Vehicle App, run unit and integration tests and collect the test results.\nThe CI Workflow will be triggered by pushing a change to the main branch of your repository:\nMake modification in any of your files\nNavigate in your terminal to your repository\nCommit and push your change\ngit add . git commit -m \"\u003cexplain your changes\u003e\" git push origin To see the results open the Actions page of your repository on GitHub, go to CI Workflow and check the workflow output.\nHow to release your Vehicle App? Now that the CI Workflow was successful, you are ready to build your first release. The goal is to build a ready-to-deploy container image that is published in the GitHub container registry\nOpen the Code page of your repository on GitHub Click on Create a new release in the Releases section on the right side Enter a version (e.g. v1.0.0) and click on Publish release GitHub will automatically create a tag using the version number The provided release workflow will be triggered by the release. It creates a release documentation and publishes the container image of the Vehicle App to the GitHub container registry. A detailed description of the workflow can be found here.\nHow to deploy your Vehicle App? After releasing the Vehicle App to the GitHub container registry you might ask how to bring the Vehicle App and the required Runtime Stack on the device. Here Eclipse Leda comes into the game.\nPlease checkout the documentation of Eclipse Leda to get more information.\nNext steps Tutorial: Creating a Vehicle Model Tutorial: Create a Vehicle App Tutorial: Develop and run integration tests for a Vehicle App ","categories":"","description":"Learn how to setup and explore the provided development environment.\n","excerpt":"Learn how to setup and explore the provided development environment.\n","ref":"/velocitas-docs/docs/tutorials/quickstart/quickstart/","tags":"","title":"Quickstart"},{"body":"Using tasks in Visual Studio Code Overview: If you are developing in Visual Studio Code, the runtime components (like KUKSA Data Broker or Vehicle Services) are available for local execution coming from our devenv-runtimes package and are accessible as Tasks, a feature of the Visual Studio Code. Additional information on tasks can be found here.\nStart local runtime: To start local runtime, a task called Local Runtime - Up is available. This task runs the runtime services in the correct order. You can run this task by clicking F1 and choose Tasks: Run task, then select Local Runtime - Up.\nTasks Management: Visual Studio Code offers various other commands concerning tasks like Start/Terminate/Restart/… You can access them by pressing F1 and typing task. A list with available task commands will appear.\nLogging: Running tasks appear in the Terminals View of Visual Studio Code. From there, you can see the logs of each running task. More detailed logs can be found inside your workspace’s logs directory ./logs/*\nAdd/Change runtime service configuration The configuration for services of our provided local runtime are defined in the runtime.json at the root of the repository devenv-runtimes. For a more detailed view on how to change or add runtime service configuration, please visit: Lifecycle Management Package Development\nUsing KUKSA Data Broker CLI A CLI tool is provided for interacting with a running instance of the KUKSA Data Broker. It can be started by running the task Local Runtime - VehicleDataBroker CLI(by pressing F1, type Run Task followed by Local Runtime - VehicleDataBroker CLI). The Runtime Local needs to be running for you to be able to use the tool.\nIntegrating a new runtime service into Visual Studio Code Task Integration of a new runtime service can be done by duplicating one of the existing tasks.\nCreate a new service in either a new created Package or branch/fork of devenv-runtimes as already explained above In .vscode/tasks.json, duplicate section from task e.g. Local Runtime - Up, Local Runtime - Run VehicleApp or Local Runtime - VehicleDataBroker CLI Correct names in a new code block Disclaimer: Problem Matcher defined in tasks.json is a feature of the Visual Studio Code Task, to ensure that the process runs in background Run task using [F1 -\u003e Tasks: Run Task -\u003e \u003cYour new task label\u003e] Task should be visible in Terminal section of Visual Studio Code Task CodeBlock helper { \"label\": \"\u003ctask_name\u003e\", \"detail\": \"\u003ctask_description\u003e\", \"type\": \"shell\", \"command\": [ \"velocitas exec runtime-local \u003cservice_id\u003e \u003cargs\u003e\" ], \"presentation\": { \"close\": true, \"reveal\": \"never\" }, \"problemMatcher\": [] } Troubleshooting Problem description: When integrating new services into an existing dev environment, it is highly recommended to use the Visual Studio Code Task Feature. A new service can be easily started by calling it from bash script, however restarting the same service might lead to port conflicts (GRPC Port or APP port). That can be easily avoided by using the Visual Studio Code Task Feature.\nCodespaces If you are using Codespaces, remember that you are working on a remote agent. That’s why it could happen that the tasks are already running in the background. If that’s the case a new start of the tasks will fail, since the ports are already in use. In the Dapr-tab of the sidebar you can check if there are already tasks running. Another possibility to check if the processes are already running, is to check which ports are already open. Check the Ports-tab to view all open ports (if not already open, hit F1 and enter View: Toggle Ports).\nNext steps Tutorial: Deploy runtime services in local Kubernetes cluster Tutorial: Setup and Explore Development Environment Concept: Deployment Model Concept: Build and release process Tutorial: Deploy a Python Vehicle App with Helm ","categories":"","description":"","excerpt":"Using tasks in Visual Studio Code Overview: If you are developing in …","ref":"/velocitas-docs/docs/tutorials/vehicle-app-runtime/run_runtime_services_locally/","tags":"","title":"Run runtime services locally"},{"body":"In the scenario of a car sharing company, the goal is to provide the functionality of automatically adjusting the driver’s seat position based on their preferred settings stored in their profile. When the driver unlocks the car, a request is sent to the vehicle to retrieve the preferred seat position. This is where your implementation begins.\nThe Seat Adjuster Vehicle App receives a MQTT message containing the seat position, which then triggers a seat adjustment command through the Seat Service to change the seat position. Additionally, to ensure convenience for future trips, the car sharing company saves the driver’s preferred seat position and utilizes it accordingly. The Seat Adjuster Vehicle App subscribes to the seat position, receiving updates from the Data Broker, which streams data from the Seat Service.\nRequesting new seat position The Customer requests the change of the seat position as MQTT message on the topic seatadjuster/setPosition/request with the payload:\n{\"requestId\": 42, \"position\": 300} The Seat Adjuster Vehicle App that has subscribed to this topic, receives the request to change the seat position as a MQTT message.\nThe Seat Adjuster Vehicle App gets the current vehicle speed from the data broker, which is fed by the CAN Feeder (KUKSA DBC Feeder).\nWith the support of the Vehicle App SDK, the Seat Adjuster Vehicle App triggers a seat adjustment command of the Seat Service via gRPC in the event that the speed is equal to zero. Hint: This is a helpful convenience check but not a safety check.\nThe Seat Service moves the seat to the new position via CAN messages.\nThe Seat Service returns OK or an error code as grpc status to the Seat Adjuster Vehicle App.\nIf everything went well, the Seat Adjuster Vehicle App returns a success message for the topic seatadjuster/setPosition/response with the payload:\n{\"requestId\": 42, \"status\": 0 } Otherwise, an error message will be returned:\n{\"requestId\": 42, \"status\": 1, \"message\": \"\u003cerror message\u003e\" } This success or error message will be returned to the Customer.\nPublishing current seat position If the seat position will be changed by the driver, the new seat position will be sent to the Seat Service via CAN.\nThe Seat Service streams the seat position via gRPC to the KUKSA Data Broker since it was registered beforehand.\nThe Seat Adjuster Vehicle App that subscribed to the seat position receives the new seat position from the KUKSA Data Broker as a result.\nThe Seat Adjuster Vehicle App publishes this on topic seatadjuster/currentPosition with the payload:\n{\"position\": 350} The Customer who has subscribed to this topic retrieves the new seat position and can store this position to use it for the next trip.\nExample Code You can find an example implementation of a Seat Adjuster vehicle application here: Seat Adjuster\n","categories":"","description":"Provides option to request a new seat position and to publish the current seat position\n","excerpt":"Provides option to request a new seat position and to publish the …","ref":"/velocitas-docs/docs/about/use_cases/seat_adjuster/","tags":"","title":"Seat Adjuster"},{"body":"Overview After you have set up the .velocitas.json for your project configuration, using packages is pretty straight forward.\nCurrently, the packages provided by the Velocitas team are the following: name description devenv-runtimes Containing scripts and configuration for Local and Kubernetes Runtime Services devenv-devcontainer-setup Basic configuration for the devcontainer, like proxy configuration, post create scripts, entry points for the lifecycle management. devenv-github-workflows Containing github workflow files used by velocitas repositories devenv-github-templates Containing github templates used by velocitas repositories devenv-runtime-local Central configuration for local runtime execution (deprecated) devenv-runtime-k3d Central configuration for k3d runtime execution (deprecated) To see how these provided packages are used inside a .velocitas.json you can use the python template repository as a reference.\nInstallation The Velocitas CLI - acting as a package manager for Vehicle App repositories - is installed inside our devcontainer-base-images. After creation of a devcontainer a postCreateCommand is configured to be executed which runs:\nvelocitas init which will initialize all packages referenced in your .velocitas.json. That means, it will download them and run their respective onPostInit programs, if any. (e.g, automated model generation) velocitas sync to sync files provided by some packages. Check the section about our Velocitas CLI to learn more about the background and usage of it.\nVelocitas Home Directory The packages will be downloaded by the Velocitas CLI to ~/.velocitas/packages/\u003cpackage_name\u003e. More Information: VELOCITAS_HOME.\nNext steps Lifecycle Management: Development of Packages Lifecycle Management: Velocitas CLI ","categories":"","description":"Learn how to use velocitas packages.\n","excerpt":"Learn how to use velocitas packages.\n","ref":"/velocitas-docs/docs/concepts/lifecycle_management/packages/usage/","tags":"","title":"Usage"},{"body":"Velocitas offers a scalable and modular development toolchain for creating containerized Vehicle Applications that offers an easy to use, fast and efficient development experience to increase the velocity of your development team.\nVehicle Apps are implemented on top of a Vehicle Model (which is generated from the underlying semantic models like VSS for a concrete programming language) and its underlying language-specific SDK to provide headless comfort functions or connected application functions like Seat Adjuster, Dog Mode, Trunk Delivery or Data Logging \u0026 triggering.\nExamples ","categories":"","description":"Is Velocitas for me? How does Velocitas help?\n","excerpt":"Is Velocitas for me? How does Velocitas help?\n","ref":"/velocitas-docs/docs/about/use_cases/","tags":"","title":"Use Cases"},{"body":"This guide will help you to import examples provided by the SDK package into your template repository.\nA Visual Studio Code task called Import example app from SDK is available in the /.vscode/tasks.json which can replace your /app directory in your template repository with some example Vehicle Apps from the SDK package.\nTo avoid overwriting existing changes in your /app directory, commit or stash changes before importing the example app. Press F1 Select command Tasks: Run Task Select Import example app from SDK Choose Continue without scanning the output Select seat-adjuster Run the Vehicle App from SDK example The launch settings are already prepared for the VehicleApp in the template repository /.vscode/launch.json. The configuration is meant to be as generic as possible to make it possible to run all provided example apps.\nEvery example app comes with its own /app/AppManifest.json to see which Vehicle Services are configured and needed as a dependency.\nTo start the app: Just press F5 to start a debug session of the example Vehicle App.\nTo debug example, please check How to debug Vehicle App?\n","categories":"","description":"Learn how to import examples provided by the Vehicle App SDK.\n","excerpt":"Learn how to import examples provided by the Vehicle App SDK.\n","ref":"/velocitas-docs/docs/tutorials/quickstart/import_examples/","tags":"","title":"Import examples"},{"body":"The Dog Mode Vehicle App consists of the following key features:\nRequest the vehicle’s Heating, Ventilation, and Air Conditioning (HVAC) service to turn the Air Conditioning (AC) ON/OFF The driver can adjust the temperature for a specific degree The Vehicle App observe the current temperature and the battery’s state of charge and react accordingly The driver/owner will be notified whenever the state of the charge drops below a certain value Example Code You can find an example implementation of a dog mode vehicle application here: Dog Mode\n","categories":"","description":"Climate control app that allows drivers to leave their vehicles while keeping the air conditioning system of the vehicle active for their pets.\n","excerpt":"Climate control app that allows drivers to leave their vehicles while …","ref":"/velocitas-docs/docs/about/use_cases/dog_mode/","tags":"","title":"Dog Mode"},{"body":"In the past the recommended runtime would for sure be Docker Desktop. But since Docker Inc. changed their license model it is fair enough for an open source project to look for free alternatives.\nLinux The obvious (and our recommended) “alternative” to Docker Desktop on Linux is to just use the Docker Engine (without Docker Desktop), a pure CLI-based solution available for most popular Linux distributions licensed under the Apache License, version 2.0. Installation instructions can be found here.\nMacOS Since the Docker Engine is not working out of the box on MacOS, a virtualizations tool which helps emulating linux is needed. Fortunately there are several solutions on the market. Good results could be achieved using Colima.\nSetup Colima Please uninstall or at least quit Docker Desktop if you already used it, before starting the setup.\nFor Colima to work properly you need Colima itself and a container client e.g. the Docker client, which is still free to use:\nbrew install colima brew install docker After the installation you need to start the runtime:\ncolima start --cpu x --memory y For M1 Macs it might be necessary to add --arch aarch64\nDocker Desktop uses 5 cores and 12 GB of RAM by default on an M1 MacBook Pro. The equivalent in Colima can be achieved with\ncolima start --cpu 5 --memory 12 That’s all you have to do. After these few steps you can go on with the devcontainer setup.\nDrawbacks The only drawback noticed so far is, that K9S is not working properly on M1 Macs. Since the container runtime and deployment are working also without K9S, this is just a minor issue. Nevertheless, the team is working on a solution.\nMicrosoft Windows There is currently no recommended alternative for Windows except using GitHub codespaces, a cloud-based development environment.\nAn option would be to setup a VM (e.g. with VirtualBox or VMWare) running a Linux system with Docker Engine (see above).\nOther alternatives Besides our recommendations above, there are further alternatives, which are not yet evaluated by this project or have some other drawbacks, blocking a recommendation.\nFor example, you could try Podman/Buildah, which can replace docker run and docker build, respectively. Podman is available for MacOS, Windows, and several Linux distributions. Buildah seems just being available for several Linux distributions.\n","categories":"","description":"Overview about the setup of tested container runtimes\n","excerpt":"Overview about the setup of tested container runtimes\n","ref":"/velocitas-docs/docs/tutorials/quickstart/container_runtime/","tags":"","title":"Install a working container runtime"},{"body":"We know what a pain and how time consuming it can be to setup your environment behind a cooperate proxy. This guide will help you to set it up correctly.\nBe aware that correct proxy configuration depends on the setup of your organization and of course of your personal development environment (hardware, OS, virtualization setup, …). So, we most probably do not cover all issues out there in the developers world. So, we encourage you to share hints and improvements with us.\nHTTP(s) proxy server Install and configure the proxy server as recommended or required by your company. For example you could use PX, which is a HTTP(s) proxy server that allows applications to authenticate through an NTLM or Kerberos proxy server, typically used in corporate deployments, without having to deal with the actual handshake. Px leverages Windows SSPI or single sign-on and automatically authenticates using the currently logged in Windows user account. It is also possible to run Px on Windows, Linux and MacOS without single sign-on by configuring the domain, username and password to authenticate with. (Source: PX)\nInstall your HTTP(s) proxy server Start your HTTP(s) proxy server Docker Desktop You need to install Docker Desktop using the right version. As we recognized a proxy issue in Docker Desktop #12672 we strongly recommend to use a Docker Desktop version \u003e= 4.8.2. In case you have an older version on your machine please update to the current version.\nIn the next step you need to enter your proxy settings:\nOpen Docker Desktop and go to the Settings From Resources, select Proxies Enable Manual proxy configuration Enter your proxy settings, this depends on the configuration you did while setting up your proxy tool e.g.: Web Server (HTTP): http://localhost:3128 Secure Web Server (HTTPS): http://localhost:3128 Bypass: localhost,127.0.0.1 Apply \u0026 Restart. Docker daemon You also have to configure the Docker daemon, which is running the containers basically, to forward the proxy settings. For this you have to add the proxy configuration to the ~/.docker/config.json. Here is an example of a proper config (Port and noProxy settings might differ for your setup):\nWindows MacOS Linux { \"proxies\":{ \"default\":{ \"httpProxy\":\"http://host.docker.internal:3128\", \"httpsProxy\":\"http://host.docker.internal:3128\", \"noProxy\":\"host.docker.internal,localhost,127.0.0.1\" } } } { \"proxies\":{ \"default\":{ \"httpProxy\":\"http://host.docker.internal:3128\", \"httpsProxy\":\"http://host.docker.internal:3128\", \"noProxy\":\"host.docker.internal,localhost,127.0.0.1\" } } } { \"proxies\":{ \"default\":{ \"httpProxy\":\"http://172.17.0.1:3128\", \"httpsProxy\":\"http://172.17.0.1:3128\", \"noProxy\":\"host.docker.internal,localhost,127.0.0.1\" } } } For more details see: Docker Documentation\nEnvironment Variables It is required to set the following environment variables:\nHTTP_PROXY - proxy server, e.g. http://localhost:3128 HTTPS_PROXY - secure proxy server, e.g. http://localhost:3128 Windows MacOS Linux set setx HTTP_PROXY \"http://localhost:3128\" setx HTTPS_PROXY \"http://localhost:3128\" echo \"export HTTP_PROXY=http://localhost:3128\" \u003e\u003e ~/.bash_profile echo \"export HTTPS_PROXY=http://localhost:3128\" \u003e\u003e ~/.bash_profile source ~/.bash_profile echo \"export HTTP_PROXY=http://localhost:3128\" \u003e\u003e ~/.bash_profile echo \"export HTTPS_PROXY=http://localhost:3128\" \u003e\u003e ~/.bash_profile source ~/.bash_profile Troubleshooting Solving issues with TLS (SSL) certificate validation using https connections from containers If you are behind a so-called intercept proxy (which you most probably are), you can run into certificate issues: Your corporate proxy works as a “man-in-the-middle” to be able to check the transferred data for malicious content. Means, there is a protected connection between the application in your local runtime environment and the proxy and another from the proxy to the external server your application wants to interact with.\nFor the authentication corporate proxies often use self-signed certificates (certificates which are not signed by a (well-known official) certificate authority. Those kind of certificates need to be added to the database of trusted certificates of your local runtime environment. This task is typically handled by the IT department of your corporation (if the OS and software installed on it is managed by them) and you will not run into problems, normally.\nIf it comes to executing containers, those are typically not managed by your IT department and the proxy certificate(s) is/are missing. So, you need to find a way to install those into the (dev) container you want to execute.\nSee (one of) those articles to get how to achieve that:\nOvercoming Proxy Issues with Docker Containers Docker behind SSL intercepting proxy Initial DevContainer build issue If you experience issues during initial DevContainer build, clean all images and volumes otherwise cache might be used:\nOpen Docker Desktop From Troubleshooting choose Clean / Purge data GitHub rate limit exceeded How to fix can be found at Lifecycle Management Troubleshooting.\n","categories":"","description":"Learn how to setup your docker desktop and Visual Studio Code behind a corporate proxy.\n","excerpt":"Learn how to setup your docker desktop and Visual Studio Code behind a …","ref":"/velocitas-docs/docs/tutorials/quickstart/behind_proxy/","tags":"","title":"Working behind proxy"},{"body":" We recommend that you make yourself familiar with the Vehicle App SDK first, before going through this tutorial.\nThe following information describes how to develop and test the sample Vehicle App that is included in the template repository. You will learn how to use the Vehicle App SDK and how to interact with the Vehicle Model.\nOnce you have completed all steps, you will have a solid understanding of the development workflow and you will be able to reuse the template repository for your own Vehicle App development project.\nDevelop your first Vehicle App This section describes how to develop your first Vehicle App. Before you start building a new Vehicle App, make sure you have already read this manual:\nSetup and Explore Development Environment Once you have established your development environment, you will be able to start developing your first Vehicle App.\nFor this tutorial, you will recreate the vehicle app that is included with the template repository: The Vehicle App allows to change the positions of the seats in the car and also provide their current positions to other applications.\nA detailed explanation of the use case and the example is available here.\nAt first, you have to create the main c++ file which we will call App.cpp in /app/src. All the relevant code for new Vehicle App goes there. Afterwards, there are several steps you need to consider when developing the app:\nManage your includes Initialize your class Start the app Manage your imports Before you start development in the App.cpp you just created, it will be necessary to include all required files, which you will understand better later through the development:\n#include \"sdk/VehicleApp.h\" #include \"sdk/IPubSubClient.h\" #include \"sdk/IVehicleDataBrokerClient.h\" #include \"sdk/Logger.h\" #include \"vehicle/Vehicle.hpp\" #include \u003cmemory\u003e using namespace velocitas; Initialize your class The main class of your new Vehicle App needs to inherit the VehicleApp provided by the SDK.\nclass MyVehicleApp : public VehicleApp { public: // \u003cremaining code in this tutorial goes here\u003e private: ::Vehicle Vehicle; // this member exists to provide simple access to the vehicle model } In your constructor, you have to choose which implementations to use for the VehicleDataBrokerClient and the PubSubClient. By default we suggest you use the factory methods to generate the default implementations: IVehicleDataBrokerClient::createInstance and IPubSubClient::createInstance. These will create a VehicleDataBrokerClient which connects to the VAL via gRPC and an MQTT-based pub-sub client.\nMyVehicleApp() : VehicleApp(IVehicleDataBrokerClient::createInstance(\"vehicledatabroker\"), // this is the dapr-app-id of the KUKSA Databroker in the VAL. IPubSubClient::createInstance(\"localhost:1883\", \"MyVehicleApp\")) // the URI to the MQTT broker and the client ID of the MQTT client. {} {} Now, you have initialized the app and can continue developing relevant methods.\nStart the app Here’s an example of how to start the MyVehicleApp app that we just developed:\nint main(int argc, char** argv) { MyVehicleApp app; app.run(); return 0; } The app is now running. In order to use it properly, we will enhance the app with more features in the next sections.\nVehicle Model Access In order to facilitate the implementation, the whole vehicle is abstracted into model classes. Please check tutorial about creating models for more details about this topic. In this section, the focus is on using the models.\nThe first thing you need to do is to get access to the Vehicle Model. If you derived your project repository from our template, we already provide a generated model in the folder app/vehicle_model/include/. This folder is already configured as “include folder” of the CMake tooling. Hence, in most cases no additional setup is necessary. How to tailor the model to your needs or how you could get access to vehicle services is described in the tutorial linked above.\nIf you want to access a single DataPoint for the vehicle speed, this can be done via\nauto vehicleSpeedBlocking = getDataPoint(Vehicle.Speed)-\u003eawait(); getDataPoint(Vehicle.Speed)-\u003eonResult([](auto vehicleSpeed){ logger().info(\"Got speed!\"); }) getDataPoint() returns a shared_ptr to an AsyncResult which, as the name implies, is the result of an asynchronous operation. We have two options to access the value of the asynchronous result. First we can use await() and block the calling thread until a result is available or use onResult(...) which allows us to inject a function pointer or a lambda which is called once the result becomes available.\nIf you want to get deeper inside the vehicle, to access a single seat for example, you just have to go the model-chain down:\nauto driverSeatPosition = getDataPoint(Vehicle.Cabin.Seat.Row(1).Pos(1).Position)-\u003eawait(); Subscription to DataPoints If you want to get notified about changes of a specific DataPoint, you can subscribe to this event, e.g. as part of the onStart() method in your app.\nvoid onStart() override { subscribeDataPoints(QueryBuilder::select(Vehicle.Cabin.Seat.Row(1).Pos(1).Position).build()) -\u003eonItem([this](auto\u0026\u0026 item) { onSeatPositionChanged(std::forward\u003cdecltype(item)\u003e(item)); }) -\u003eonError([this](auto\u0026\u0026 status) { onError(std::forward\u003cdecltype(status)\u003e(status)); }); } void onSeatPositionChanged(const DataPointsResult\u0026 result) { const auto dataPoint = result.get(Vehicle.Cabin.Seat.Row(1).Pos(1).Position); logger().info(dataPoint-\u003evalue()); // do something with the data point value } The VehicleApp class provides the subscribeDataPoints() method which allows to listen for changes on one or many data points. Once a change in any of the data points is registered, the callback registered via AsyncSubscription::onItem() is called. Conversely, the callback registered via AsyncSubscription::onError() is called once there is any error during communication with the KUKSA data broker.\nThe result passed to the callback registered via onItem() is an object of type DataPointsResult which holds all data points that have changed. Individual data points can be accessed directly by their reference: result.get(Vehicle.Cabin.Seat.Row(1).Pos(1).Position))\nServices Note Services are not supported by our automated vehicle model lifecycle for the time being. If you need access to services please read here how you can create a model and add services to it manually. Services are used to communicate with other parts of the vehicle via remote function calls (RPC). Please read the basics about them here.\nThe following few lines show you how to use the moveComponent() method of the SeatService you have created:\nvehicle::cabin::SeatService::SeatLocation location{1, 1}; Vehicle.Cabin.SeatService.moveComponent( location, vehicle::cabin::SeatService::Component::Base, 300 )-\u003eawait(); In order to know which seat to move, you have to pass a SeatLocation object as the first parameter. The second argument specifies the component to be moved. The possible components are defined in the proto-files. The last parameter to be passed into the method is the final position of the component.\nMake sure to call the await() method when calling service methods or register a callback via onResult() otherwise you don’t know when your asynchronous call will finish.\nMQTT Interaction with other Vehicle Apps or the cloud is enabled by using Mosquitto MQTT Broker. The MQTT broker runs inside a docker image, which is started automatically after starting the DevContainer.\nIn the quickstart section about the Vehicle App, you already tested sending MQTT messages to the app. In the previous sections, you generally saw how to use Vehicle Models, DataPoints and GRPC Services. In this section, you will learn how to combine them with MQTT.\nIn order to receive and process MQTT messages inside your app, simply use the VehicleApp::subscribeTopic method provided by the SDK:\nvoid onStart() override { subscribeTopic(\"seatadjuster/setPosition/request\") -\u003eonItem([this](auto\u0026\u0026 item){ onSetPositionRequestReceived(std::forward\u003cdecltype(item)\u003e(item);)}); } void onSetPositionRequestReceived(const std::string\u0026 data) { const auto jsonData = nlohmann::json::parse(data); const auto responseTopic = \"seatadjuster/setPosition/response\"; nlohmann::json respData({{\"requestId\", jsonData[\"requestId\"]}, {\"result\", {}}}); } The onSetPositionRequestReceived method will now be invoked every time a message is created on the subscribed topic \"seatadjuster/setPosition/response\". The message data (string) is provided as parameter. In the example above the data is parsed to json (data = json.loads(data_str)).\nIn order to publish data to other subscribers, the SDK provides the appropriate convenience method: VehicleApp::publishToTopic(...)\nvoid MyVehicleApp::onSeatPositionChanged(const DataPointsResult\u0026 result): const auto responseTopic = \"seatadjuster/currentPosition\"; nlohmann::json respData({\"position\": result.get(Vehicle.Cabin.Seat.Row(1).Pos(1).Position)-\u003evalue()}); publishToTopic( responseTopic, respData.dump(), ); The above example illustrates how one can easily publish messages. In this case, every time the seat position changes, the new position is published to seatadjuster/currentPosition\nSee the results Once the implementation is done, it is time to run and debug the app.\nBuild your App Before you can run the Vehicle App you need to build it first. To do so, simply run the provided build.sh script found in the root of the SDK. It does accept some arguments, but that is out of scope for this tutorial.\nWarning If this is your first time building, you might have to run install_dependencies.sh first. Run your App If you want to run the app together with a Dapr sidecar and use the Dapr middleware, you have to use the “dapr run …” command to start your app:\ndapr run --app-id myvehicleapp --app-port 50008 --config ./.dapr/config.yaml --components-path ./.dapr/components build/bin/App You already have seen this command and how to check if it is working in the general setup.\n2 parameters may be unclear in this command:\nthe config file config.yaml the components-path For now, you just need to know that these parameters are needed to make everything work together.\nThe config.yaml has to be placed in the folder called .dapr and has the following content:\napiVersion: dapr.io/v1alpha1 kind: Configuration metadata: name: config spec: tracing: samplingRate: \"1\" zipkin: endpointAddress: http://localhost:9411/api/v2/spans features: - name: proxy.grpc enabled: true An important part is the enabling of the GRPC proxy, to make the communication work.\nInside the .dapr folder you find another folder called components. There you only find one configuration file for the MQTT communication with the following content:\napiVersion: dapr.io/v1alpha1 kind: Component metadata: name: mqtt-pubsub namespace: default spec: type: pubsub.mqtt version: v1 metadata: - name: url value: \"mqtt://localhost:1883\" - name: qos value: 1 - name: retain value: \"false\" - name: cleanSession value: \"false\" If you want to know more about dapr and the configuration, please visit the dapr documentation.\nDebug your Vehicle App In the introduction about debugging, you saw how to start a debugging session. In this section, you will learn what is happening in the background.\nThe debug session launch settings are already prepared for the VehicleApp.\n\"configurations\": [ { \"name\": \"VehicleApp - Debug (dapr)\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"${workspaceFolder}/build/bin/App\", \"args\": [], \"stopAtEntry\": false, \"cwd\": \"${workspaceFolder}\", \"environment\": [ { \"name\": \"DAPR_GRPC_PORT\", \"value\": \"50001\" }, { \"name\": \"DAPR_HTTP_PORT\", \"value\": \"3500\" } ], \"externalConsole\": false, \"MIMode\": \"gdb\", \"setupCommands\": [ { \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true }, { \"description\": \"Set Disassembly Flavor to Intel\", \"text\": \"-gdb-set disassembly-flavor intel\", \"ignoreFailures\": true } ], \"preLaunchTask\": \"dapr-VehicleApp-run\", \"postDebugTask\": \"dapr-VehicleApp-stop\" } ] We specify which binary to run using the program key. With the preLaunchTask and postDebugTask keys, you can also specify tasks to run before or after debugging. In this example, DAPR is set up to start the app before and stop it again after debugging. Below you can see the 2 tasks.\n{ \"label\": \"dapr-VehicleApp-run\", \"appId\": \"myvehicleapp\", \"componentsPath\": \"./.dapr/components\", \"config\": \"./.dapr/config.yaml\", \"grpcPort\": 50001, \"httpPort\": 3500, \"type\": \"dapr\", \"presentation\": { \"close\": true, \"reveal\": \"never\" }, } { \"label\": \"dapr-VehicleApp-stop\", \"type\": \"shell\", \"command\": [ \"dapr stop --app-id myvehicleapp\" ], \"presentation\": { \"close\": true, \"reveal\": \"never\" }, } Lastly, the environment variables can also be specified.\nYou can adapt the JSON to your needs (e.g., change the ports, add new tasks) or even add a completely new configuration for another Vehicle App.\nOnce you are done, you have to switch to the debugging tab (sidebar on the left) and select your configuration using the dropdown on the top. You can now start the debug session by clicking the play button or F5. Debugging is now as simple as in every other IDE, just place your breakpoints and follow the flow of your Vehicle App.\nNext steps Concept: SDK Overview Tutorial: Deploy runtime services in Kubernetes Tutorial: Start runtime services locally Tutorial: Creating a Vehicle Model Tutorial: Develop and run integration tests for a Vehicle App Concept: Deployment Model Tutorial: Deploy a Vehicle App with Helm ","categories":"","description":"Learn how to develop and test a _Vehicle App_ using C++.\n","excerpt":"Learn how to develop and test a _Vehicle App_ using C++.\n","ref":"/velocitas-docs/docs/tutorials/vehicle-app-development/tutorial_how_to_create_a_vehicle_app_cpp/","tags":"","title":"C++ Vehicle App Development"},{"body":"Getting started First thing you need to do is to create a repository at e.g., https://github.com/my-organisation/my-velocitas-package. The URL needs to be referenced in the .velocitas.json of your Vehicle App repository.\nGeneral configuration of Packages Every Package repository needs a manifest.json at their root. The manifest.json is the package configuration and holds package relevant information and its behaviour.\nHere are examples of this configuration:\ndevenv-runtimes manifest devenv-devcontainer-setup manifest The manifest of a package describes a list of components. They are a collection of programs or files that serve a similar purpose or are inheritly connected. I.e. they provide a single runtime, a deployment for a runtime or add configuration required for Github Workflows or the devcontainer. More detailed information and explanation about configuration fields of the manifest.json and package development can be found here.\nConfiguration of Runtime Packages If you want to add a new service, adapt runtime.json and manifest.json. In order to use a newly created or updated service, new changes on devenv-runtimes need to be tagged and referenced inside .velocitas.json of the respective package version via a tag or branch name of the repository. When a version is changed in your .velocitas.json you have to initialize it through velocitas init from the terminal so the new package version will be installed. A new service can be started by using velocitas cli command velocitas exec runtime-local \u003cservice_id\u003e \u003cargs\u003e which can be also configured inside your ./.vscode/tasks.json.\nIf you plan to develop a Package with the purpose of managing the runtime used together with your Vehicle App the package needs a runtime.json at their root. The runtime.json is the runtime configuration containing all information for the relevant service dependencies with the following three required attributes:\nProperty Description id unique service id interfaces used for dependency resolution between Vehicle App and runtime config configurations in form of Key/Value pair with specific pre–defined keys and corresponding values Supported config keys of a service Key Value Description image URI of a container image port port number port-forward port mapping for forwarding env environment variable used by the service: \u003cenv_key\u003e=\u003cenv_value\u003e mount path for mounting files: \u003csource_path\u003e:\u003ctarget_path\u003e arg argument for starting the service start-pattern optional start pattern for identifying if the service starts correctly Runtime configuration helper { \"id\": \"\u003cservice_id\u003e\", \"interfaces\": [ \"\u003cinterface\u003e\" ], \"config\": [ { \"key\": \"image\", \"value\": \"\u003cimage\u003e:\u003ctag\u003e\" }, { \"key\": \"port\", \"value\": \"\u003cport_number\u003e\" }, { \"key\": \"port-forward\", \"value\": \"\u003csource_port\u003e:\u003ctarget_port\u003e\" }, { \"key\": \"env\", \"value\": \"\u003cenv_key\u003e=\u003cenv_value\u003e\" }, { \"key\": \"mount\", \"value\": \"\u003csource_path\u003e:\u003ctarget_path\u003e\" }, { \"key\": \"arg\", \"value\": \"\u003carg\u003e\" }, { \"key\": \"start-pattern\", \"value\": \".*Listening on \\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+:\\\\d+\" } ] } In order to use a newly created or updated service, changes on the respective Package need to be tagged and referenced inside the .velocitas.json of your Vehicle App repository via a tag or branch name of the repository. More info about installation: Usage.\nNote A new service can be started manually and/or configured inside your ./.vscode/tasks.json with: velocitas exec runtime-local \u003cservice_id\u003e \u003cargs\u003e Next steps Lifecycle Management: Velocitas CLI ","categories":"","description":"Learn how to develop an own package.\n","excerpt":"Learn how to develop an own package.\n","ref":"/velocitas-docs/docs/concepts/lifecycle_management/packages/development/","tags":"","title":"Development"},{"body":"Background Our Velocitas CLI is introduced to support the process of the lifecycle of a Vehicle App as a project manager.\nCommands You can find all information about available commands here.\nCLI Flow examples velocitas init Download packages configured in your .velocitas.json to VELOCITAS_HOME\nvscode ➜ /workspaces/eclipse-vehicle-app-python-template (main) $ velocitas init Initializing Velocitas packages ... ... Downloading package: 'devenv-runtimes:v1.0.1' ... Downloading package: 'devenv-github-workflows:v2.0.4' ... Downloading package: 'devenv-github-templates:v1.0.1' ... Downloading package: 'devenv-devcontainer-setup:v1.1.7' Running post init hook for model-generator Running 'install-deps' ... velocitas sync If any package provides files they will be synchronized into your repository. Note This will overwrite any changes you have made to the files manually! Affected files are prefixed with an auto generated notice: vscode ➜ /workspaces/eclipse-vehicle-app-python-template (main) $ velocitas sync Syncing Velocitas components! ... syncing 'devenv-github-workflows' ... syncing 'devenv-github-templates' ... syncing 'devenv-devcontainer-setup' velocitas upgrade vscode ➜ /workspaces/eclipse-vehicle-app-python-template (main) $ velocitas upgrade --dry-run Checking for updates! ... 'devenv-runtimes' is up to date! ... 'devenv-github-workflows' is up to date! ... 'devenv-github-templates' is up to date! ... 'devenv-devcontainer-setup' is currently at v1.1.6, can be updated to v1.1.7 ... Do you wish to continue? [y/n] [y]: y velocitas package vscode ➜ /workspaces/eclipse-vehicle-app-python-template (main) $ velocitas package devenv-devcontainer-setup devenv-devcontainer-setup version: v1.1.7 components: - id: devcontainer-setup type: setup variables: language type: string description: The programming language of the project. Either 'python' or 'cpp' required: true repoType type: string description: The type of the repository: 'app' or 'sdk' required: true appManifestPath type: string description: Path of the AppManifest file, relative to the .velocitas.json required: true vscode ➜ /workspaces/eclipse-vehicle-app-python-template (main) $ velocitas package devenv-devcontainer-setup -p /home/vscode/.velocitas/packages/devenv-devcontainer-setup/v1.1.7 velocitas exec vscode ➜ /workspaces/eclipse-vehicle-app-python-template (main) $ velocitas exec runtime-local run-vehicledatabroker ####################################################### ### Running Databroker ### ####################################################### ... More detailed usage can be found at the Velocitas CLI README.\nAdditional Information Cache Usage The Velocitas CLI supports caching data for a Vehicle App project. The cache data makes it easy for any script/program of a component to read from or write to. More detailed information about the Project Cache can be found here.\nBuilt-In Variables The Velocitas CLI also creates default environment variables which are available to every script/program.\nvariable description VELOCITAS_WORKSPACE_DIR Current working directory of the Vehicle App VELOCITAS_CACHE_DIR Vehicle App project specific cache directory. e.g, ~/.velocitas/cache/\u003cgeneratedMd5Hash\u003e VELOCITAS_CACHE_DATA JSON string of ~/.velocitas/cache/\u003cgeneratedMd5Hash\u003e/cache.json VELOCITAS_APP_MANIFEST JSON string of the Vehicle App AppManifest More detailed information about Built-In Variables can be found here.\nNext steps Lifecycle Management: Troubleshooting ","categories":"","description":"Learn everything about the Velocitas CLI.\n","excerpt":"Learn everything about the Velocitas CLI.\n","ref":"/velocitas-docs/docs/concepts/lifecycle_management/velocitas-cli/","tags":"","title":"Velocitas CLI"},{"body":"Services can make sure, that when you write a VSS datapoint, something is actually happening. Eclipse Velocitas has an example seat, hvac or light service. If your Vehicle App makes use of e.g. Vehicle.Cabin.Seat.Row1.Pos1.Position, Vehicle.Body.Lights.IsBackupOn, Vehicle.Body.Lights.IsHighBeamOn, Vehicle.Body.Lights.IsLowBeamOn you are in for some real action. To learn more, visit Vehicle Services.\nYou can validate the interaction of the service with your Vehicle App by making use of a Vehicle Service.\nOur maintained devenv-runtimes package (Velocitas Lifecycle Management) comes with the support of adding further Vehicle Services to the runtime.json of a package. More information here. (A general vehicle mock service is also coming soon!)\nModify services For more advanced usage you can als try modifying existing services. Check out the seat service for example, modify it and integrate it into your Vehicle App repository.\nCreate your own services If you want to create your own service the KUKSA.val Services repository contains examples illustrating how such kind of vehicle services can be built. You need to write an application that talks to KUKSA.val listening to changes of a target value of some VSS datapoint and then do whatever you want. You can achieve this by using the KUKSA.val GRPC API with any programming language of your choice (learn more about GRPC).\n","categories":"","description":"Learn how to integrate a Vehicle Service that executes the request on vehicle side\n","excerpt":"Learn how to integrate a Vehicle Service that executes the request on …","ref":"/velocitas-docs/docs/tutorials/prototyping/service_integration/","tags":"","title":"Service Integration"},{"body":"The Velocitas development model is centered around what are known as Vehicle Apps. Automation allows engineers to make high-impact changes frequently and deploy Vehicle Apps through cloud backends as over-the-air updates. The Vehicle App development model is about speed and agility paired with state-of-the-art software quality.\nDevelopment Architecture Velocitas provides a flexible development architecture for Vehicle Apps. The following diagram shows the major components of the Velocitas stack.\nVehicle Apps The Vehicle Applications (aka. Vehicle Apps) contain the business logic that needs to be executed on a vehicle. A Vehicle App is implemented on top of a Vehicle Model and its underlying language-specific SDK. Many concepts of cloud-native and twelve-factor applications apply to Vehicle Apps as well and are summarized in the next chapter.\nVehicle Models A Vehicle Model makes it possible to easily get vehicle data from the Data Broker and to execute remote procedure calls over gRPC against Vehicle Services and other Vehicle Apps. It is generated from the underlying semantic models for a concrete programming language as a graph-based, strongly-typed, intellisense-enabled library. The elements of the vehicle models are defined by the SDKs.\nSDKs Our SDKs, available for different programming languages, are the foundation for the vehicle abstraction provided by the vehicle model Furthermore, they offer abstraction from the underlying middleware and communication protocols, besides providing the base classes and utilities for the Vehicle Apps. SDKs are available for Python and C++, currently. Further SDKs for Rust and C are planned.\nVehicle Services Vehicle Services provide service interfaces to control actuators or to trigger (complex) actions. E.g. they communicate with the vehicle internal networks like CAN or Ethernet, which are connected to actuators, electronic control units (ECUs) and other vehicle computers (VCs). They may provide a simulation mode to run without a network interface. Vehicle services may feed data to the Data Broker and may expose gRPC endpoints, which can be invoked by Vehicle Apps over a Vehicle Model.\nData Broker Vehicle data is stored in the KUKSA Data Broker conforming to an underlying Semantic Model like VSS. Vehicle Apps can either pull this data or subscribe for updates. In addition, it supports rule-based access to reduce the number of updates sent to the Vehicle App.\nSemantic models The Vehicle Signal Specification (VSS) provides a domain taxonomy for vehicle signals and defines the vehicle data semantically, which is exchanged between Vehicle Apps and the Data Broker.\nThe Vehicle Service Catalog (VSC) extends VSS with functional remote procedure call definitions and semantically defines the gRPC interfaces of Vehicle Services and Vehicle Apps.\nAs an alternative to VSS and VSC, vehicle data and services can be defined semantically in a general IoT modelling language like Digital Twin Definition Language (DTDL) or BAMM Aspect Meta Model BAMM as well.\nThe Velocitas SDK is using VSS as the semantic model for the Vehicle Model.\nCommunication Protocols Asynchronous communication between Vehicle Apps and other vehicle components, as well as cloud connectivity, is facilitated through MQTT messaging. Direct, synchronous communication between Vehicle Apps, Vehicle Services and the Data Broker is based on the gRPC protocol.\nMiddleware Abstraction Velocitas provides middleware abstraction interfaces for Service Discovery, PubSub Messaging Protocol and other cross-cutting functionality. By default, Velocitas leverages dapr for gRPC service discovery, Open Telemetry tracing and the publish/subscribe building block.\nVehicle Edge Operating System Vehicle Apps are expected to run on a Linux-based operating system. An OCI-compliant container runtime is required to host the Vehicle App containers and the dapr middleware mandates a Kubernetes control plane. For publish/subscribe messaging a MQTT broker must be available (e.g., Eclipse Mosquitto).\nVehicle App Characteristics The following aspects are important characteristics for Vehicle Apps:\nCode base: Every Vehicle App is stored in its own repository. Tracked by version control, it can be deployed to multiple environments.\nPolyglot: Vehicle Apps can be written in any programming language. System-level programming languages like Rust and C/C++ are particularly relevant for limited hardware resources found in vehicles, but higher-level languages like Python and JavaScript are also considered for special use cases.\nOCI-compliant containers: Vehicle Apps are deployed as OCI-compliant containers. The size of these containers should be minimal to fit on constrained devices.\nIsolation: Each Vehicle App should execute in its own process and should be self-contained with its interfaces and functionality exposed on its own port.\nConfigurations: Configuration information is separated from the code base of the Vehicle App, so that the same deployment can propagate across environments with their respective configuration applied.\nDisposability: Favor fast startup and support graceful shutdowns to leave the system in a correct state.\nObservability: Vehicle Apps provide traces, metrics and logs of every part of the application using Open Telemetry.\nOver-the-air update capability: Vehicle Apps can be deployed via cloud backends like Pantaris and updated in vehicles frequently over the air through NextGen OTA updates.\nDevelopment Process The starting point for developing Vehicle Apps is a Semantic Model of the vehicle data and vehicle services. Based on the Semantic Model, language-specific Vehicle Models are generated. Vehicle Models are then distributed as packages to the respective package manager of the chosen programming language (e.g. pip, cargo, npm, …).\nAfter a Vehicle Model is available for the chosen programming language, the Vehicle App can be developed using the generated Vehicle Model and its SDK.\nFurther information ","categories":"","description":"Learn more about provided development model for Vehicle Apps.\n","excerpt":"Learn more about provided development model for Vehicle Apps.\n","ref":"/velocitas-docs/docs/concepts/development_model/","tags":"","title":"Development Model"},{"body":"GitHub rate limit exceeded To avoid exceeding GitHubs rate limit we suggest to generate a personal access token in your GitHub settings and set it as an environment variable:\nMac/Linux Windows export GITHUB_API_TOKEN=\u003cyour_api_token\u003e\nset GITHUB_API_TOKEN=\u003cyour_api_token\u003e or Set environment variable via system settings GITHUB_API_TOKEN=\u003cyour_api_token\u003e\nAfter you have set the ENV consider to restart VS Code.\nIt is important that VS Code has access to this ENV during the postCreateCommand inside the devcontainer. If you experienced this error and the devcontainer still has started correctly please run either:\nvscode ➜ /workspaces/eclipse-vehicle-app-python-template (main) $ ./.devcontainer/scripts/postCreateCommand.sh or\nvscode ➜ /workspaces/eclipse-vehicle-app-python-template (main) $ velocitas init vscode ➜ /workspaces/eclipse-vehicle-app-python-template (main) $ velocitas sync ","categories":"","description":"Known issues and fixes.\n","excerpt":"Known issues and fixes.\n","ref":"/velocitas-docs/docs/concepts/lifecycle_management/troubleshooting/","tags":"","title":"Troubleshooting"},{"body":"The Velocitas project provides a two-stage process for development, continuous integration, and release of a new version of a Vehicle App.\nStage 1 - Build \u0026 Test On every new push to the main branch or every update to a pull request, a GitHub workflow is automatically executed to build your application as a container (optionally for different platforms), runs automated tests and code quality checks, and stores all results as GitHub artifacts for future reference with a default retention period of 90 days.\nThe workflow provides quick feedback during development and improves efficient collaboration.\nStage 2 - Release Once the application is ready to be released in a new version, a dedicated release workflow is automatically executed as soon as you create a new release via GitHub.\nThe release workflow bundles all relevant images and artifacts into one tagged set of files and pushes it to the GitHub Container Registry. In addition, all the information needed for quality assurance and documentation are published as release artifacts on GitHub. The image pushed to the GitHub Container Registry can afterwards be deployed on your target system using the Over-The-Air (OTA) update system of your choice.\nThe drawing below illustrates the different workflows, actions and artifacts that are automatically created for you. All workflows are intended as a sensible baseline and can be extended and adapted to the needs of your own project.\nCI Workflow (ci.yml) The Continuous Integration (CI) workflow is triggered on every commit to the main branch or when creating/updating a pull request and contains a set of actions to achieve the following objectives:\nBuilding a container for the app - actions create a containerized version of the Vehicle App. Scanning for vulnerabilities - actions scan your code and container for vulnerabilities and in case of findings the workflow will be marked as “failed”. Running integration tests - actions provision a runtime instance and deploy all required services as containers together with your containerized application to allow for automatically executing integration test cases. In case the test cases fail, the workflow will be marked as “failed”. Running unit tests \u0026 code coverage - actions run unit tests and calculate code coverage for your application, in case of errors or unsatisfactory code coverage, the workflow will be marked as “failed”. Storing scan \u0026 test results as GitHub action artifacts - actions store results from the previously mentioned actions for further reference or download as Github Action Artifacts. Check out the example GitHub workflows in our repositories for python\nBuild multi-arch image Workflow (build-multiarch-image.yml) The Build multi-arch image workflow is triggered on every commit to the main branch and contains a set of actions to achieve the following objectives:\nBuilding a multi-arch container for the app - actions create a containerized version of the Vehicle App for multiple architectures (currently AMD64 and ARM64). Scanning for vulnerabilities - actions scan your code and container for vulnerabilities and in case of findings the workflow will be marked as “failed”. Storing container images to GitHub action artifacts - at the end of the workflow, the container image created is stored in a Github Action Artifacts so that it can be referenced by the Release Workflow later. Generate Deployment Files - actions generate a PodSpec-file and HelmCharts to ease the deployment of the Vehicle App and the runtime services. Release Workflow (release.yml) The Release workflow is triggered as soon as the main branch is ready for release and the Vehicle App developer creates a new GitHub release. This can be done manually through the GitHub UI.\nOn creating a new release with a specific new version, GitHub creates a tag and automatically runs the Release workflow defined in .github/workflows/release.yml, given that CI workflow has run successfully for the current commit on the main branch.\nThe set of actions included in the Release workflow cover the objective:\nGenerating and publishing QA information - actions load the QA information from GitHub artifacts stored for the same commit reference and verify it. Additionally, release documentation is generated and added to the GitHub release. If there is no information available for the current commit, the release workflow will fail. Publish as GitHub pages - all information from the release together with the project documentation is built as a static page using hugo. The result is pushed to a separate branch and can be published as a GitHub page in your repository. Pull \u0026 label container image - actions pull the Vehicle App container image based on the current commit hash from the GitHub artifacts and label it with the specified tag version. If the image cannot be found, the workflow will fail. Push container image to ghcr.io - finally the labeled container image is pushed to the GitHub container registry and can be used as a deployment source. GitHub Actions artifacts GitHub Actions artifacts are used for storing data, which is generated by the CI workflow and referenced by the Release workflow. This saves time during workflow runs because we don’t have to create artifacts multiple times.\nGitHub Actions artifacts always have a retention period, which is 90 days by default. This may be configured differently in the specific GitHub organization. After this period, the QA info gets purged automatically. In this case, a re-run of the CI workflow would be required to regenerate all QA info needed for creating a release.\nContainer Registry The GitHub container registry is used for storing container images pushed by the Release workflow. These images can easily be used for a deployment and don’t have a retention period. Since the registry does not have an automatic cleanup, it keeps container images as long as they are not deleted. It is recommended that you automate the removal of older images to limit storage size and costs.\nVersioning Vehicle App image versions are set to the Git tag name during release. Though any versioning scheme can be adopted, the usage of semantic versions is recommended.\nIf the tag name contains a semantic version, the leading v will be trimmed. Example: A tag name of v1.0.0 will lead to version 1.0.0 of the Vehicle App container.\nMaintaining multiple versions If there is a need to maintain multiple versions of a Vehicle App, e.g., to hotfix the production version while working on a new version at the same time or to support multiple versions in production, create and use release branches.\nThe release process would be the same as described in the overview, except that a release branch (e.g., release/v1.0) is created before the release step and the GitHub release is based on the release branch rather than the main branch. For hotfixes, release branches may be created retroactively from the release tag, if needed.\nFurther information Tutorial: How to write integration tests Tutorial: Deploy a Vehicle App with Helm Tutorial: Deploy a Vehicle App with PodSpecs ","categories":"","description":"Learn more about the provided continuous integration, and release process of a Vehicle App.\n","excerpt":"Learn more about the provided continuous integration, and release …","ref":"/velocitas-docs/docs/concepts/deployment_model/vehicle_app_releases/","tags":"","title":"Build and Release Process"},{"body":"The Velocitas project uses a common deployment model. It uses OCI-compliant containers to increase the flexibility for the support of different programming languages and runtimes, which accelerates innovation and development. OCI-compliant containers also allow for a standardized yet flexible deployment process, which increases the ease of operation. Using OCI-compliant is portable to different architectures as long as there is support for OCI-compliant containers on the desired platform (e.g., like a container runtime for arm32, arm64 or amd64).\nGuiding principles The deployment model is guided by the following principles\nApplications are provided as OCI-compliant container images. The container runtime offers a Kubernetes-compatible control plane and API to manage the container lifecycle. Helm charts are used as deployment descriptor specification. The template projects provided come with a pre-configured developer toolchain that accelerates the development process. The developer toolchain ensures an easy creation through a high-degree of automation of all required artifacts needed to follow the Velocitas principles.\nTesting your container during development The Velocitas project provides developers with a repository template and devcontainer that contains everything to build a containerized version of your app locally and test it. Check out our tutorial e.g., for the python template to learn more.\nAutomated container image builds Velocitas uses GitHub workflows to automate the creation of your containerized application. A workflow is started with every increment of your application code that you push to your GitHub repository. The workflow creates a containerized version of your application and stores this container image in a registry. Further actions are carried out using this container (e.g., integration tests).\nThe workflows are set up to support multi-platform container creation and generate container images for amd64 and arm64 out of the box. This provides a great starting point for developers and lets you add additional support for further platforms easily.\nFurther information ","categories":"","description":"Learn more about our deployment model and guiding principles.\n","excerpt":"Learn more about our deployment model and guiding principles.\n","ref":"/velocitas-docs/docs/concepts/deployment_model/","tags":"","title":"Deployment Model"},{"body":"\nRepository Description vehicle-app-python-template GitHub Template repository contains an exemplary Vehicle App that uses an exemplary SDK to provide access to vehicle data points and methods. The sample SDK extends the sdv-vehicle-app-python-sdk. In addition the template repository contains the development environment for Visual Studio Code for a Vehicle App as well as the CI/CD workflows that can be used as blueprint for your own Vehicle App written in Python. vehicle-app-python-sdk Provides basic functionality to write a SDK to allow access to vehicle data points and method. This includes publishing \u0026 subscribe messaging, VehicleApp API, vehicle data model ontology and function-based query \u0026 rule support. vehicle-model-python Basic vehicle model for Python is generated from VSS with addition of some specialized vehicle services. vehicle-app-cpp-template GitHub Template repository contains an exemplary Vehicle App that uses an exemplary SDK to provide access to vehicle data points and methods. The sample SDK extends the sdv-vehicle-app-cpp-sdk. In addition the template repository contains the development environment for Visual Studio Code for a Vehicle App as well as the CI/CD workflows that can be used as blueprint for your own Vehicle App written in C++. vehicle-app-cpp-sdk Provides basic functionality to write a SDK to allow access to vehicle data points and method. This includes publishing \u0026 subscribe messaging, VehicleApp API, vehicle data model ontology and function-based query \u0026 rule support. vehicle-model-cpp Basic vehicle model for C++ is generated from VSS with addition of some specialized vehicle services. kuksa.val Is a part of the Vehicle Abstraction Layer (VAL) of the Eclipse KUKSA project and provides the KUKSA Data Broker. The KUKSA Data Broker offers data points available in the vehicle to the Vehicle Apps semantically aligned to a data model like the Vehicle Signal Specification (VSS). kuksa.val.feeders The KUKSA DBC Feeder is a generic data feeder that reads data from the vehicle’s CAN bus defined by a DBC file, maps them to a set of data points (e.g. according to the VSS) and feeds it into the Data Broker. kuksa.val.services Provides exemplary vehicle services and respective implementations that illustrates how to interact with in-vehicle components and services via an unified access that is semantically described e.g. in the Vehicle Service Catalog (VSC). release-documentation-action GitHub Action to generate a release documentation from the CI workflow output by rendering it to markdown files so that this can be easily published with GitHub Pages. license-check GitHub Action to collect the licenses of the used components and can be configured to fail with an error message on invalid licenses. vehicle-model-generator Provides basic functionality to create a vehicle model from the given vspec specification for the target programming cli The CLI implements Velocitas lifecyle management concept of the development environment of a Vehicle App. It allows us to take care of the development environment while you focus on the business logic of your vehicle application. devcontainer-base-images Central configuration to create base docker images for specific languages to be used in devcontainer Package Repositories Repository Description devenv-runtimes Central configuration for maintained runtime services devenv-devcontainer-setup Central configuration for setting up devcontainer environment devenv-github-workflows Central configuration for syncing github workflows devenv-github-templates Central configuration for syncing github templates devenv-runtime-local Central configuration for local runtime execution (deprecated) devenv-runtime-k3d Central configuration for k3d runtime execution (deprecated) ","categories":"","description":"The repositories of the Eclipse _Velocitas_ and their relations between each other\n","excerpt":"The repositories of the Eclipse _Velocitas_ and their relations …","ref":"/velocitas-docs/docs/about/repository-overview/","tags":"","title":"Repository Overview"},{"body":" Info This article describes our new model lifecycle approach released on Friday, 2023-03-03. With that, the model is now automatically generated with the instantiation of the devContainer. It is generated from the vehicle model source file referenced in the AppManifest.\nFor the time being, the integration of services is not supported by the new approach.\nThe previous approach, using pre-generated model repositories, is now deprecated. But it is still available and described here.\nThis tutorial will show you how:\nthe vehicle API used as the source to generate the model is referenced in the app manifest, the automatic generation of the model works, you can trigger manual recreation of the model (after adding extensions to the API required by your project) How to Reference a Model Specification The model specification defines the vehicle API to be used by your project. It is referenced in the AppManifest.json via a URI or local file path like this:\nURI reference Local file reference \"vehicleModel\": { \"src\": \"\u003chttps://github.com/COVESA/vehicle_signal_specification/releases/download/v3.0/vss_rel_3.0.json\u003e\" } \"vehicleModel\": { \"src\": \"./my_model/my_model.json\" } Info The reference must point to a JSON file containing the model specification as VSS vspec. References to a VSS .vspec file hierarchy are not supported as of now. Model Creation The generation of the model is taking place:\nthrough a onPostInit hook when velocitas init is called: either triggered manually or automatically during the instantiation of the devContainer through our Velocitas Lifecycle Management, or when you trigger the VS Code task (Re-)generate vehicle model explicitly. The model generation is a three step process:\nThe model generator is installed as a Python package (if not already present) The referenced model specification is downloaded (if no local reference) The model code is generated and installed. The model is generated using our Velocitas vehicle-model-generator. The used version and also the repository of the generator can be altered via the variables section of the project configuration in the .velocitas.json. The default values for those are defined in the manifest.json of the devContainer setup package. Also, the target folder for the generated model source code is specified here:\n{ \"variables\": { \"modelGeneratorGitRepo\": \"https://github.com/eclipse-velocitas/vehicle-model-generator.git\", \"modelGeneratorGitRef\": \"v0.3.0\", \"generatedModelPath\": \"./gen/vehicle_model\" } } In Python template based projects the generated model is finally installed in the site-packages folder, while in C++ projects it is made available as a CMake include folder.\nFurther information Concept: SDK Overview Tutorial: Setup and Explore Development Environment Tutorial: Create a Vehicle App ","categories":"","description":"Learn how to refer a model source and how the automated model lifecycle is working.\n","excerpt":"Learn how to refer a model source and how the automated model …","ref":"/velocitas-docs/docs/tutorials/vehicle_model_creation/automated_model_lifecycle/","tags":"","title":"Automated Vehicle Model Lifecycle"},{"body":"Problem Currently, the development of in-vehicle applications (Vehicle Apps) can be excessively complex and challenging:\nMany time-consuming steps involved from setting up the development environment to the deployment of a Vehicle App.\nUnderstanding the vehicle's E/E architecture details and specific API requires expert knowledge.\nPorting a _Vehicle App_ to another vehicle platform is complex.\nSpecific processes, methods, and tools within each company creates challenges for effective collaboration.\nSolution The solution would be a development toolchain for creating vehicle-independent applications with:\nUsage of standardized vehicle APIs.\nEnabling portability through containerized Apps with no dependencies to E/E architecture.\nPre-configured project setup​.\nSpeeding up the development by reducing complexity focus on differentiating business logic to innovate quickly.\nProduct Eclipse Velocitas™ is an open source project providing an end-to-end, scalable and modular development tool chain to create containerized Vehicle Apps, offering a comfortable, fast and efficient development experience to increase the speed of a development team (velocity).\nFeatures Project lifecycle management to update Vehicle App repositories via CLI. Vehicle abstraction support helps to focus on business logic by using a generated vehicle model on code level with type safety and auto-completion. The vehicle model is generated from a standardized API that hides the details of vehicle-specific signals and E/E architecture, allowing Vehicle Apps to be portable across different electronics and software architectures. Microsoft Visual Studio Code integration with DevContainer helps to install everything required to start the local development immediately, while tasks and launch configurations help to launch runtime services, other apps, and tests. Vehicle App skeleton and examples helps to understand easily how to write a Vehicle Apps using the KUKSA VAL runtime services. Ready-to-use CI/CD workflows that build (for multi architectures), test, document and deploy a containerized Vehicle App with no dependencies to E/E architecture help saving setup time. Language Support Feature Python C++ Project lifecycle management + + Vehicle abstraction support + + Visual Studio Code integration + + Vehicle App skeleton and examples + + CI/CD workflows + + Unit test support + + Integration test support + Digital Auto integration + Concepts ","categories":"","description":"Explore the goal, benefits and basic concepts of Eclipse _Velocitas™_\n","excerpt":"Explore the goal, benefits and basic concepts of Eclipse _Velocitas™_\n","ref":"/velocitas-docs/docs/about/","tags":"","title":"About Velocitas"},{"body":"Not yet done for C++\n","categories":"","description":"Learn how to create a Vehicle Model manually for C++\n","excerpt":"Learn how to create a Vehicle Model manually for C++\n","ref":"/velocitas-docs/docs/tutorials/vehicle_model_creation/manual_model_creation/manual_creation_cpp/","tags":"","title":"C++ Manual Vehicle Model Creation"},{"body":"","categories":"","description":"Learn how to setup and explore the provided development environment.\n","excerpt":"Learn how to setup and explore the provided development environment.\n","ref":"/velocitas-docs/docs/tutorials/quickstart/","tags":"","title":"Getting Started"},{"body":"Introduction The Vehicle App SDK consists of the following building blocks:\nVehicle Model Ontology: The SDK provides a set of model base classes for the creation of vehicle models.\nMiddleware integration: Vehicle Models can contain gRPC stubs to communicate with Vehicle Services. gRPC communication is integrated with the Dapr middleware for service discovery and OpenTelemetry tracing.\nFluent query \u0026 rule construction: Based on a concrete Vehicle Model, the SDK is able to generate queries and rules against the KUKSA Data Broker to access the real values of the data points that are defined in the vehicle model.\nPublish \u0026 subscribe messaging: The SDK supports publishing messages to a MQTT broker and subscribing to topics of a MQTT broker.\nVehicle App abstraction: Last but not least the SDK provides a Vehicle App base class, which every Vehicle App derives from.\nAn overview of the Vehicle App SDK and its dependencies is depicted in the following diagram:\nVehicle Model Ontology The Vehicle Model is a tree-based model where every branch in the tree, including the root, is derived from the Model base class.\nThe Vehicle Model Ontology consists of the following classes:\nModel A model contains services, data points and other models. It corresponds to branch entries in VSS or interfaces in DTDL or namespaces in VSC.\nModelCollection Info The ModelCollection is deprecated since SDK v0.4.0. The generated vehicle model must reflect the actual representation of the data points. Please use the Model base class instead. Specifications like VSS support a concept that is called Instances. It makes it possible to describe repeating definitions. In DTDL, such kind of structures may be modeled with Relationships. In the SDK, these structures are mapped with the ModelCollection class. A ModelCollection is a collection of models, which make it possible to reference an individual model either by a NamedRange (e.g., Row [1-3]), a Dictionary (e.g., “Left”, “Right”) or a combination of both.\nService Direct asynchronous communication between Vehicle Apps and Vehicle Services is facilitated via the gRPC protocol.\nThe SDK has its own Service base class, which provides a convenience API layer to access the exposed methods of exactly one gRPC endpoint of a Vehicle Service or another Vehicle App. Please see the Middleware Integration section for more details.\nDataPoint DataPoint is the base class for all data points. It corresponds to sensors/actuators in VSS or telemetry / properties in DTDL.\nData Points are the signals that are typically emitted by Vehicle Services.\nThe representation of a data point is a path starting with the root model, e.g.:\nVehicle.Speed Vehicle.FuelLevel Vehicle.Cabin.Seat.Row1.Pos1.Position Data points are defined as attributes of the model classes. The attribute name is the name of the data point without its path.\nTyped DataPoint classes Every primitive datatype has a corresponding typed data point class, which is derived from DataPoint (e.g., DataPointInt32, DataPointFloat, DataPointBool, DataPointString, etc.).\nExample An example of a Vehicle Model created with the described ontology is shown below:\nPython C++ ## import ontology classes from sdv import ( DataPointDouble, Model, Service, DataPointInt32, DataPointBool, DataPointArray, DataPointString, ) class Seat(Model): def __init__(self, name, parent): super().__init__(parent) self.name = name self.Position = DataPointBool(\"Position\", self) self.IsOccupied = DataPointBool(\"IsOccupied\", self) self.IsBelted = DataPointBool(\"IsBelted\", self) self.Height = DataPointInt32(\"Height\", self) self.Recline = DataPointInt32(\"Recline\", self) class Cabin(Model): def __init__(self, name, parent): super().__init__(parent) self.name = name self.DriverPosition = DataPointInt32(\"DriverPosition\", self) self.Seat = SeatCollection(\"Seat\", self) class SeatCollection(Model): def __init__(self, name, parent): super().__init__(parent) self.name = name self.Row1 = self.RowType(\"Row1\", self) self.Row2 = self.RowType(\"Row2\", self) def Row(self, index: int): if index \u003c 1 or index \u003e 2: raise IndexError(f\"Index {index} is out of range\") _options = { 1 : self.Row1, 2 : self.Row2, } return _options.get(index) class RowType(Model): def __init__(self, name, parent): super().__init__(parent) self.name = name self.Pos1 = Seat(\"Pos1\", self) self.Pos2 = Seat(\"Pos2\", self) self.Pos3 = Seat(\"Pos3\", self) def Pos(self, index: int): if index \u003c 1 or index \u003e 3: raise IndexError(f\"Index {index} is out of range\") _options = { 1 : self.Pos1, 2 : self.Pos2, 3 : self.Pos3, } return _options.get(index) class VehicleIdentification(Model): def __init__(self, name, parent): super().__init__(parent) self.name = name self.VIN = DataPointString(\"VIN\", self) self.Model = DataPointString(\"Model\", self) class CurrentLocation(Model): def __init__(self, name, parent): super().__init__(parent) self.name = name self.Latitude = DataPointDouble(\"Latitude\", self) self.Longitude = DataPointDouble(\"Longitude\", self) self.Timestamp = DataPointString(\"Timestamp\", self) self.Altitude = DataPointDouble(\"Altitude\", self) class Vehicle(Model): def __init__(self, name, parent): super().__init__(parent) self.name = name self.Speed = DataPointFloat(\"Speed\", self) self.CurrentLocation = CurrentLocation(\"CurrentLocation\", self) self.Cabin = Cabin(\"Cabin\", self) vehicle = Vehicle(\"Vehicle\") #include \"sdk/DataPoint.h\" #include \"sdk/Model.h\" using namespace velocitas; class Seat : public Model { public: Seat(std::string name, Model* parent) : Model(name, parent) {} DataPointBoolean Position{\"Position\", this}; DataPointBoolean IsOccupied{\"IsOccupied\", this}; DataPointBoolean IsBelted{\"IsBelted\", this}; DataPointInt32 Height{\"Height\", this}; DataPointInt32 Recline{\"Recline\", this}; }; class CurrentLocation : public Model { public: CurrentLocation(Model* parent) : Model(\"CurrentLocation\", parent) {} DataPointDouble Latitude{\"Latitude\", this}; DataPointDouble Longitude{\"Longitude\", this}; DataPointString Timestamp{\"Timestamp\", this}; DataPointDouble Altitude{\"Altitude\", this}; }; class Cabin : public Model { public: class SeatCollection : public Model { public: class RowType : public Model { public: using Model::Model; Seat Pos1{\"Pos1\", this}; Seat Pos2{\"Pos2\", this}; }; SeatCollection(Model* parent) : Model(\"Seat\", parent) {} RowType Row1{\"Row1\", this}; RowType Row2{\"Row2\", this}; }; Cabin(Model* parent) : Model(\"Cabin\", parent) {} DataPointInt32 DriverPosition{\"DriverPosition\", this}; SeatCollection Seat{this}; }; class Vehicle : public Model { public: Vehicle() : Model(\"Vehicle\") {} DataPointFloat Speed{\"Speed\", this}; ::CurrentLocation CurrentLocation{this}; ::Cabin Cabin{this}; }; Middleware integration gRPC Services Vehicle Services are expected to expose their public endpoints over the gRPC protocol. The related protobuf definitions are used to generate method stubs for the Vehicle Model to make it possible to call the methods of the Vehicle Services.\nModel integration Based on the .proto files of the Vehicle Services, the protocol buffer compiler generates descriptors for all rpcs, messages, fields etc for the target language. The gRPC stubs are wrapped by a convenience layer class derived from Service that contains all the methods of the underlying protocol buffer specification.\nInfo The convenience layer of C++ is a bit more extensive than in Python. The complexity of gRPC’s async API is hidden behind individual AsyncGrpcFacade implementations which need to be implemented manually. Have a look at the SeatService of the SeatAdjusterApp example and its SeatServiceAsyncGrpcFacade. Python C++ class SeatService(Service): def __init__(self): super().__init__() self._stub = SeatsStub(self.channel) async def Move(self, seat: Seat): response = await self._stub.Move( MoveRequest(seat=seat), metadata=self.metadata ) return response class SeatService : public Service { public: // nested classes/structs omitted SeatService(Model* parent) : Service(\"SeatService\", parent) , m_asyncGrpcFacade(grpc::CreateChannel(\"localhost:50051\", grpc::InsecureChannelCredentials())) { } AsyncResultPtr_t\u003cVoidResult\u003e move(Seat seat) { auto asyncResult = std::make_shared\u003cAsyncResult\u003cVoidResult\u003e\u003e(); m_asyncGrpcFacade-\u003eMove( toGrpcSeat(seat), [asyncResult](const auto\u0026 reply){ asyncResult-\u003einsertResult(VoidResult{})}), [asyncResult](const auto\u0026 status){ asyncResult-\u003einsertError(toInternalStatus(status))}; return asyncResult; } private: std::shared_ptr\u003cSeatServiceAsyncGrpcFacade\u003e m_asyncGrpcFacade; }; Service discovery The underlying gRPC channel is provided and managed by the Service base class of the SDK. It is also responsible for routing the method invocation to the service through the dapr middleware. As a result, a dapr-app-id has to be assigned to every Service, so that dapr can discover the corresponding vehicle services. This dapr-app-id has to be specified as an environment variable named \u003cservice_name\u003e_DAPR_APP_ID.\nFluent query \u0026 rule construction A set of query methods like get(), where(), join() etc. are provided through the Model and DataPoint base classes. These functions make it possible to construct SQL-like queries and subscriptions in a fluent language, which are then transmitted through the gRPC interface to the KUKSA Data Broker.\nQuery examples The following examples show you how to query data points.\nGet single datapoint Python C++ driver_pos: int = vehicle.Cabin.DriverPosition.get() # Call to broker # GetDataPoint(rule=\"SELECT Vehicle.Cabin.DriverPosition\") auto driverPos = getDataPoints({Vehicle.Cabin.DriverPosition})-\u003eawait(); // Call to broker: // GetDataPoint(rule=\"SELECT Vehicle.Cabin.DriverPosition\") Get datapoints from multiple branches Python C++ vehicle_data = vehicle.CurrentLocation.Latitude.join( vehicle.CurrentLocation.Longitude).get() print(f' Latitude: {vehicle_data.CurrentLocation.Latitude} Longitude: {vehicle_data.CurrentLocation.Longitude} ') # Call to broker # GetDataPoint(rule=\"SELECT Vehicle.CurrentLocation.Latitude, CurrentLocation.Longitude\") auto datapoints = getDataPoints({Vehicle.CurrentLocation.Latitude, Vehicle.CurrentLocation.Longitude})-\u003eawait(); // Call to broker: // GetDataPoint(rule=\"SELECT Vehicle.CurrentLocation.Latitude, CurrentLocation.Longitude\") Subscription examples Subscribe and Unsubscribe to a single datapoint Python C++ self.rule = ( await self.vehicle.Cabin.Seat.Row(2).Pos(1).Position .subscribe(self.on_seat_position_change) ) def on_seat_position_change(self, data: DataPointReply): position = data.get(self.vehicle.Cabin.Seat.Row2.Pos1.Position).value print(f'Seat position changed to {position}') # Call to broker # Subscribe(rule=\"SELECT Vehicle.Cabin.Seat.Row2.Pos1.Position\") # If needed, the subscription can be stopped like this await self.rule.subscription.unsubscribe() auto subscription = subscribeDataPoints( velocitas::QueryBuilder::select(Vehicle.Cabin.Seat.Row(2).Pos(1).Position).build()) -\u003eonItem( [this](auto\u0026\u0026 item) { onSeatPositionChanged(std::forward\u003cdecltype(item)\u003e(item)); }); // If needed, the subscription can be stopped like this: subscription-\u003ecancel(); void onSeatPositionChanged(const DataPointMap_t datapoints) { logger().info(\"SeatPosition has changed to: \"+ datapoints.at(Vehicle.Cabin.Seat.Row(2).Pos(1).Position)-\u003easFloat().get()); } Subscribe to a single datapoint with a filter Python C++ Vehicle.Cabin.Seat.Row(2).Pos(1).Position.where( \"Cabin.Seat.Row2.Pos1.Position \u003e 50\") .subscribe(on_seat_position_change) def on_seat_position_change(data: DataPointReply): position = data.get(Vehicle.Cabin.Seat.Row2.Pos1.Position).value print(f'Seat position changed to {position}') # Call to broker # Subscribe(rule=\"SELECT Vehicle.Cabin.Seat.Row2.Pos1.Position WHERE Vehicle.Cabin.Seat.Row2.Pos1.Position \u003e 50\") auto query = QueryBuilder::select(Vehicle.Cabin.Seat.Row(2).Pos(1).Position) .where(vehicle.Cabin.Seat.Row(2).Pos(1).Position) .gt(50) .build(); subscribeDataPoints(query)-\u003eonItem([this](auto\u0026\u0026 item){onSeatPositionChanged(std::forward\u003cdecltype(item)\u003e(item));})); void onSeatPositionChanged(const DataPointMap_t datapoints) { logger().info(\"SeatPosition has changed to: \"+ datapoints.at(Vehicle.Cabin.Seat.Row(2).Pos(1).Position)-\u003easFloat().get()); } // Call to broker: // Subscribe(rule=\"SELECT Vehicle.Cabin.Seat.Row2.Pos1.Position WHERE Vehicle.Cabin.Seat.Row2.Pos1.Position \u003e 50\") Publish \u0026 subscribe messaging The SDK supports publishing messages to a MQTT broker and subscribing to topics of a MQTT broker. By leveraging the dapr pub/sub building block for this purpose, the low-level MQTT communication is abstracted away from the Vehicle App developer. Especially the physical address and port of the MQTT broker is no longer configured in the Vehicle App itself, but rather is part of the dapr configuration, which is outside of the Vehicle App.\nPublish MQTT Messages MQTT messages can be published easily with the publish_mqtt_event() method, inherited from VehicleApp base class:\nPython C++ await self.publish_mqtt_event( \"seatadjuster/currentPosition\", json.dumps(req_data)) publishToTopic(\"seatadjuster/currentPosition\", \"{ \\\"position\\\": 40 }\"); Subscribe to MQTT Topics In Python subscriptions to MQTT topics can be easily established with the subscribe_topic() annotation. The annotation needs to be applied to a method of the Vehicle App class. In C++ the subscribeToTopic() method has to be called. Callbacks for onItem and onError can be set. The following examples provide some more details.\nPython C++ @subscribe_topic(\"seatadjuster/setPosition/request\") async def on_set_position_request_received(self, data: str) -\u003e None: data = json.loads(data) logger.info(\"Set Position Request received: data=%s\", data) #include \u003cfmt/core.h\u003e #include \u003cnlohmann/json.hpp\u003e subscribeToTopic(\"seatadjuster/setPosition/request\")-\u003eonItem([this](auto\u0026\u0026 item){ const auto jsonData = nlohmann::json::parse(item); logger().info(fmt::format(\"Set Position Request received: data={}\", jsonData)); }); Under the hood, the vehicle app creates a grpc endpoint on port 50008, which is exposed to the dapr middleware. The dapr middleware will then subscribe to the MQTT broker and forward the messages to the vehicle app.\nTo change the app port, set it in the main() method of the app:\nPython C++ from sdv import conf async def main(): conf.DAPR_APP_PORT = \u003cyour port\u003e // c++ does not use dapr for Pub/Sub messaging at this point Vehicle App abstraction Vehicle Apps are inherited from the VehicleApp base class. This enables the Vehicle App to use the Publish \u0026 Subscribe messaging and to connect to the KUKSA Data Broker.\nThe Vehicle Model instance is passed to the constructor of the VehicleApp class and should be stored in a member variable (e.g. self.vehicle for Python, std::shared_ptr\u003cVehicle\u003e m_vehicle; for C++), to be used by all methods within the application.\nFinally, the run() method of the VehicleApp class is called to start the Vehicle App and register all MQTT topic and Data Broker subscriptions.\nImplementation detail In Python, the subscriptions are based on asyncio, which makes it necessary to call the run() method with an active asyncio event_loop. A typical skeleton of a Vehicle App looks like this:\nPython C++ class SeatAdjusterApp(VehicleApp): def __init__(self, vehicle: Vehicle): super().__init__() self.vehicle = vehicle async def main(): # Main function logger.info(\"Starting seat adjuster app...\") seat_adjuster_app = SeatAdjusterApp(vehicle) await seat_adjuster_app.run() LOOP = asyncio.get_event_loop() LOOP.add_signal_handler(signal.SIGTERM, LOOP.stop) LOOP.run_until_complete(main()) LOOP.close() #include \"sdk/VehicleApp.h\" #include \"vehicle/Vehicle.hpp\" using namespace velocitas; class SeatAdjusterApp : public VehicleApp { public: SeatAdjusterApp() : VehicleApp(IVehicleDataBrokerClient::createInstance(\"vehicledatabroker\")), IPubSubClient::createInstance(\"localhost:1883\", \"SeatAdjusterApp\")) {} private: ::Vehicle Vehicle; }; int main(int argc, char** argv) { SeatAdjusterApp app; app.run(); return 0; } Further information Tutorial: Setup and Explore Development Environment Tutorial: Vehicle Model Creation Tutorial: Vehicle App Development Tutorial: Develop and run integration tests for a Vehicle App ","categories":"","description":"Learn more about the provided Vehicle App SDK.\n","excerpt":"Learn more about the provided Vehicle App SDK.\n","ref":"/velocitas-docs/docs/concepts/development_model/vehicle_app_sdk/","tags":"","title":"Vehicle App SDK"},{"body":"","categories":"","description":"Overview of Velocitas Concepts.\n","excerpt":"Overview of Velocitas Concepts.\n","ref":"/velocitas-docs/docs/concepts/","tags":"","title":"Concepts"},{"body":"Introduction Once a repository has been created from one of our Vehicle App templates, basically the only way to receive updates into your derived repository is to manually pull changes, which would be quite tedious and error prone. This is where our Lifecycle Management comes to the rescue!\nAll of our main components of the development environment, like\ntools runtimes devcontainer configuration and setup build systems CI workflows are (or will be) provided as versioned packages which can be updated individually, if required.\nThe driver for this is our Velocitas CLI which is our package manager for Vehicle App repositories.\nOverview Here we can see how the MyVehicleApp repository references package repositories by Velocitas, customer specific packages and some packages from a totally different development platform (Gitee).\nIf you want to learn more about how to reference and use packages check the sections for project configuration and packages.\nLifecycle Management flow ","categories":"","description":"Learn more about our lifecycle management.\n","excerpt":"Learn more about our lifecycle management.\n","ref":"/velocitas-docs/docs/concepts/lifecycle_management/","tags":"","title":"Lifecycle Management"},{"body":"","categories":"","description":"","excerpt":"","ref":"/velocitas-docs/docs/tutorials/prototyping/","tags":"","title":"Prototyping Integration"},{"body":"Introduction The Vehicle_Abstraction Layer (VAL) enables access to the systems and functions of a vehicle via a unified - or even better - a standardized Vehicle API abstracting from the details of the end-to-end architecture of the vehicle. The unified API enables Vehicle Apps to run on different vehicle architectures of a single OEM. Vehicle Apps can be even implemented OEM-agnostic, if using a API based on a standard like COVESA’s Vehicle Signal Specification. The Vehicle API obsoletes the knowledge where signal come from or where to send it and in which format they are provided or needed by the respective vehicle system.\nThe Eclipse Velocitas project is using the Vehicle Abstraction Layer (VAL) of the Eclipse KUKSA project, also called KUKSA.VAL. KUKSA.VAL does not provide a concrete VAL. That’s up to you as an OEM (vehicle manufacturer) or as a supplier. But KUKSA.VAL provides the components and tools that helps you to implement a VAL for your chosen end-to-end architecture. Also, it can support you to simulate the vehicle hardware during the development phase of an Vehicle App or Service.\nKUKSA VAL provides you with ready-to-use generic components for the signal-based access to the vehicle, like the KUKSA Data Broker and the generic Data Providers (aka Data Feeders). It also provides you reference implementations of certain Vehicle Services, like the Seat Service and the HVAC Service.\nArchitecture The image below shows the main components of the Vehicle Abstraction Layer (VAL) and its relation to the Velocitas Development Model.\nKUKSA Data Broker The KUKSA Data Broker is a gRPC service acting as a broker of vehicle data / signals also called data points in the following. It provides central access to vehicle data points arranged in a - preferably standardized - vehicle data model like the COVESA Vehicle Signal Specification (VSS) or others. But this is not a must, it is also possible to use your own (proprietary) vehicle model or to extend the COVESA VSS with your specific extensions via VSS overlays.\nData points represent certain states of the vehicle, like the current vehicle speed or the currently applied gear. Data points can represent sensor values like the vehicle speed or engine temperature, actuators like the wiper mode, and immutable attributes of the vehicle like the needed fuel type(s) of the vehicle, engine displacement, maximum power, etc.\nData points factually belonging together are typically arranged in branches and sub-branches of a tree structure (like this example on the COVESA VSS site).\nThe KUKSA Data Broker is implemented in Rust, can run in a container and provides services to get datapoints, update datapoints and for subscribing to automatic notifications on datapoint changes. Filter- and rule-based subscriptions of datapoints can be used to reduce the number of updates sent to the subscriber.\nData Providers / Data Feeders Conceptually, a data provider is the responsible to take care for a certain set of data points: It provides updates of sensor data from the vehicle to the data broker and forwards updates of actuator values to the vehicle. The set of data points a data provider maintains may depend on the network interface (e.g. CAN bus) via that those data is accessible or it can depend on a certain use case the provider is responsible for (like seat control).\nEclipse KUKSA provides several generic Data Providers for different datasources. As of today, Eclipse Velocitas only utilizes the generic CAN feeder (KUKSA DBC Feeder) implemented in Python, which reads data from a CAN bus based on mappings specified in e.g. a CAN network description (dbc) file. The feeder uses a mapping file and data point meta data to convert the source data to data points and injects them into the data broker using its Collector gRPC interface. The feeder automatically reconnects to the data broker in the event that the connection is lost.\nVehicle Services A vehicle service offers a vehicle app to interact with the vehicle systems on a RPC-like basis. It can provide service interfaces to control actuators or to trigger (complex) actions, or provide interfaces to get data. It communicates with the Hardware Abstraction to execute the underlying services, but may also interact with the data broker.\nThe KUKSA.VAL Services repository contains examples illustrating how such kind of vehicle services can be built.\nHardware Abstraction Data feeders rely on hardware abstraction. Hardware abstraction is project/platform specific. The reference implementation relies on SocketCAN and vxcan, see https://github.com/eclipse/kuksa.val.feeders/tree/main/dbc2val. The hardware abstraction may offer replaying (e.g., CAN) data from a file (can dump file) when the respective data source (e.g., CAN) is not available.\nOverview of the vehicle abstraction layer architecture Information Flow The vehicle abstraction layer offers an information flow between vehicle networks and vehicle services. The data that can flow is ultimately limited to the data available through the Hardware Abstraction, which is platform/project-specific. The KUKSA Data Broker offers read/subscribe access to data points based on a gRPC service. The data points which are actually available are defined by the set of feeders providing the data into the broker. Services (like the seat service) define which CAN signals they listen to and which CAN signals they send themselves, see documentation. Service implementations may also interact as feeders with the data broker.\nData flow when a Vehicle Application uses the KUKSA Data Broker Architectural representation of the KUKSA data broker data flow Data flow when a Vehicle Application uses a Vehicle Service Architectural representation of the vehicle service data flow Source Code Source code and build instructions are available in the respective KUKSA.VAL repositories:\nKUKSA Data Broker KUKSA DBC Feeder KUKSA example services Guidelines Guidelines for best practices on how to specify a gRPC-based service interface and on how to implement a vehicle service can be found in the kuksa.val.services repository. ","categories":"","description":"Learn about the main concepts and components of the vehicle abstraction and how it relates to the [Eclipse KUKSA project](https://www.eclipse.org/kuksa/).\n","excerpt":"Learn about the main concepts and components of the vehicle …","ref":"/velocitas-docs/docs/concepts/development_model/val/","tags":"","title":"Vehicle Abstraction Layer (VAL)"},{"body":"Now that you have created your own Vehicle Model, we can distribute it to make use of it in Vehicle Apps.\nCopying the folder to your Vehicle App repo The easiest way to get started quickly is to copy the created model, presumably stored in vehicle_model into your Vehicle App repository to use it. To do so, simply copy and paste the directory into the \u003csdk_root\u003e/app directory and replace the existing model.\nUsing a git submodule A similar approach to the one above but a bit more difficult to set up is to create a git repository for the created model. The advantage of this approach is that you can share the same model between multiple Vehicle Apps without any manual effort.\nCreate a new git repository on i.e. Github Clone it locally, add the created vehicle_model folder to the git repository Commit everything and push the branch In your Vehicle App repo, add a new git submodule via\ngit submodule add \u003ccheckout URL of your new repo\u003e app/vehicle_model git submodule init Now you are ready to develop new Vehicle Apps with your custom Vehicle Model!\n","categories":"","description":"Learn how to distribute a Vehicle Model written in C++.\n","excerpt":"Learn how to distribute a Vehicle Model written in C++.\n","ref":"/velocitas-docs/docs/tutorials/vehicle_model_creation/manual_model_creation/vehicle_model_distribution/distribution_cpp/","tags":"","title":"C++ Vehicle Model Distribution"},{"body":" Info With the release of our new model lifecycle approach on Friday, 2023-03-03, the model is now automatically generated with the instantiation of the devContainer from a model source referenced in the app manifest.\nThe approach described here, using pre-generated model repositories, is deprecated as of now. But it is still available and must be used if you need access to vehicle services. Please be aware, that you would either have to use template versions before the above mentioned release, or you need to adapt the newer versions of the template using the old approach.\nThis tutorial will show you how to:\nCreate a Vehicle Model Add a Vehicle Service to the Vehicle Model Distribute your Python Vehicle Model Note A Vehicle Model should be defined in its own package. This makes it possible to distribute the Vehicle Model later as a standalone package and to use it in different Vehicle App projects.\nThe creation of a new vehicle model is only required if the vehicle signals (like sensors and actuators) defined in the current version of the COVESA Vehicle Signal Specification (VSS) is not sufficient for the definition of your vehicle API. Otherwise you could use the default vehicle model we already generated for you, see Python Vehicle Model and C++ Vehicle Model.\nCreate a Vehicle Model from VSS specification A Vehicle Model can be generated from a COVESA Vehicle Signal Specification (VSS). VSS introduces a domain taxonomy for vehicle signals, in the sense of classical attributes, sensors and actuators with the raw data communicated over vehicle buses and data. The Velocitas vehicle-model-generator creates a Vehicle Model from the given specification and generates a package for use in Vehicle App projects.\nFollow the steps to generate a Vehicle Model.\nClone the vehicle-model-generator repository in a container volume.\nIn this container volume, clone the vehicle-signal-specification repository and if required checkout a particular branch:\ngit clone https://github.com/COVESA/vehicle_signal_specification cd vehicle_signal_specification git checkout \u003cbranch-name\u003e In case the VSS vspec doesn’t contain the required signals, you can create a vspec using the VSS Rule Set.\nExecute the command\npython3 gen_vehicle_model.py -I ./vehicle_signal_specification/spec ./vehicle_signal_specification/spec/VehicleSignalSpecification.vspec -l \u003clang\u003e -T sdv_model -N sdv_model or if you want to generate it from a .json file\npython3 gen_vehicle_model.py \u003cpath_to_your_json_file\u003e -l \u003clang\u003e -T sdv_model Depending on the value of lang, which can assume the values python and cpp, this creates a sdv_model directory in the root of repository along with all generated source files for the given programming language.\nHere is an overview of what is generated for every available value of lang:\nlang output python python sources and a setup.py ready to be used as python package cpp c++ sources, headers and a CMakeLists.txt ready to be used as a CMake project To have a custom model name, refer to README of vehicle-model-generator repository.\nFor python: Change the version of package in setup.py manually (defaults to 0.1.0).\nNow the newly generated sdv_model can be used for distribution. (See Distributing your Vehicle Model)\nCreate a Vehicle Model Manually Alternative to the generation from a VSS specification you could create the Vehicle Model manually. The following sections describing the required steps.\nPython Distributing your Vehicle Model Once you have created your Vehicle Model either manually or via the Vehicle Model Generator, you need to distribute your model to use it in an application. Follow the links below for language specific tutorials on how to distribute your freshly created Vehicle Model.\nPython C++ Further information Concept: SDK Overview Tutorial: Setup and Explore Development Environment Tutorial: Create a Vehicle App ","categories":"","description":"Learn how to manually create a vehicle model to access vehicle data or execute remote procedure calls.\n","excerpt":"Learn how to manually create a vehicle model to access vehicle data or …","ref":"/velocitas-docs/docs/tutorials/vehicle_model_creation/manual_model_creation/","tags":"","title":"Manual Vehicle Model Creation"},{"body":"Introduction The AppManifest defines the name and the requirements of a Vehicle App. The requirements are specified on interface level. The manifest defines the required service interfaces (e.g. gRPC functions) and the used vehicle model and accessed data points, but it does not define certain providers of those interfaces. This concept provides flexibility by separating the requirements of a Vehicle App from the definition of a concrete Runtime and Middleware configuration.\nThe AppManifest is the only source of truth in our Vehicle App templates for:\nLocal development environments and configs deployment specs generation Velocitas CI/CD workflow OCI Image creation Purpose The AppManifest contains necessary information about the runtime requirements (VehicleModel, interfaces) of the app The AppManifest contains all required (or optional) data points that are used in the Vehicle App with the necessary access rights (read, write) The AppManifest is service provider/implementation agnostic, while the service configurations are part of a corresponding Velocitas Lifecycle Management runtime package Structure // AppManifest.json { \"name\":\"SampleApp\", \"vehicleModel\":{ \"src\":\"https://github.com/COVESA/vehicle_signal_specification/releases/download/v3.0/vss_rel_3.0.json\", \"datapoints\":[ { \"path\":\"Vehicle.Speed\", \"required\":\"true\", \"access\":\"read\" } ] }, \"runtime\":[ \"grpc://sdv.databroker.v1.Broker/GetDatapoints\", \"grpc://sdv.databroker.v1.Broker/Subscribe\", \"grpc://sdv.databroker.v1.Broker/SetDatapoints\", \"mqtt\" ] } Vehicle Model Description The Vehicle Model of the Vehicle App is described with the source and required (or optional) datapoints. More information: Vehicle Model Creation\nThe source (“src”) identifies the used Vehicle Model description and the data points section defines which signals (i.e. data points) of that model need to be available for the Vehicle App to run:\nThe path references the definition (type, data type, unit, and other metadata) of a data point in the specified model The required flag tells if that data point is mandatory for the app to run or just optional access defines the required access right of the app to that data point (see below) Further information can be found here: How to Reference a Model Specification Datapoint Access Rights Access Right Description Vehicle Databroker Interface read app needs to read the value of the datapoint from the provider (e.g. get value from databroker). GetDatapoints/Subscribe write app needs to get and set the value of the datapoint (e.g. set, set_many values via the databroker or services). WRITE access implicitly has READ access. SetDatapoints AppManifest Examples Runtime interface via databroker Runtime interface via specific service // Here we have a dependency to the databroker, the App doesn't have any direct // connection to the SeatService because the databroker forwards the set requests from // the app via SetDatapoints to the corresponding SeatService { \"name\": \"SeatAdjuster\", \"vehicleModel\": { \"src\": \"./app/vehiclemodel/used_vss.json\", \"datapoints\": [ { \"path\": \"Vehicle.Cabin.Seat.Row1.Pos1.Position\", \"required\": \"true\", \"access\": \"write\" }, { \"path\": \"Vehicle.Speed\", \"required\": \"true\", \"access\": \"read\" } ], }, \"runtime\": [ \"grpc://sdv.databroker.v1.Broker/GetDatapoints\", \"grpc://sdv.databroker.v1.Broker/Subscribe\", \"grpc://sdv.databroker.v1.Broker/SetDatapoints\", \"mqtt\" ] } // Here the app establishes a direct gRPC connection to the // Vehicle SeatService and adjusts the seat position via // the MoveComponent Interface { \"name\": \"SeatAdjuster\", \"vehicleModel\": { \"src\": \"./app/vehiclemodel/used_vss.json\", \"datapoints\": [ { \"path\": \"Vehicle.Cabin.Seat.Row1.Pos1.Position\", \"required\": \"true\", \"access\": \"write\" }, { \"path\": \"Vehicle.Speed\", \"required\": \"true\", \"access\": \"read\" } ], }, \"runtime\": [ \"grpc://sdv.databroker.v1.Broker/GetDatapoints\", \"grpc://sdv.databroker.v1.Broker/Subscribe\", \"grpc://sdv.edge.comfort.seats.v1.Seats/MoveComponent\" \"mqtt\" ] } Further information Tutorial: Setup and Explore Development Environment Tutorial: Vehicle Model Creation Tutorial: Vehicle App Development Concept: Lifecycle Management ","categories":"","description":"Learn more about the _Vehicle App_ Manifest.\n","excerpt":"Learn more about the _Vehicle App_ Manifest.\n","ref":"/velocitas-docs/docs/concepts/development_model/vehicle_app_manifest/","tags":"","title":"Vehicle App Manifest"},{"body":"Now you a have a Python package containing your first Python Vehicle Model and it is time to distribute it. There is nothing special about the distribution of this package, since it is just an ordinary Python package. Check out the Python Packaging User Guide to learn more about packaging and package distribution in Python.\nDistribute to single Vehicle App If you want to distribute your Python Vehicle Model to a single Vehicle App, you can do so by copying the entire folder my_vehicle_model under the /app/src folder of your Vehicle App repository and treat it as a sub-package of the Vehicle App.\nCreate a new folder my_vehicle_model under /app/src in your Vehicle App repository. Copy the my_vehicle_model folder to the /app/src folder of your Vehicle App repository. Import the package my_vehicle_model in your Vehicle App: from \u003cmy_app\u003e.my_vehicle_model import vehicle ... my_app = MyVehicleApp(vehicle) Distribute inside an organization If you want to distribute your Python Vehicle Model inside an organization and use it to develop multiple Vehicle Apps, you can do so by creating a dedicated Git repository and copying the files there.\nCreate new Git repository called my_vehicle_model\nCopy the content under my_vehicle_model to the repository.\nRelease the Vehicle Model by creating a version tag (e.g., v1.0.0).\nInstall the Vehicle Model package to your Vehicle App:\npip3 install git+https://github.com/\u003cyourorg\u003e/my_vehicle_model.git@v1.0.0 Import the package my_vehicle_model in your Vehicle App and use it as shown in the previous section.\nDistribute publicly as open source If you want to distribute your Python Vehicle Model publicly, you can do so by creating a Python package and distributing it on the Python Package Index (PyPI). PyPi is a repository of software for the Python programming language and helps you find and install software developed and shared by the Python community. If you use the pip command, you are already using PyPI.\nDetailed instructions on how to make a Python package available on PyPI can be found here.\n","categories":"","description":"Learn how to distribute a Vehicle Model written in Python.\n","excerpt":"Learn how to distribute a Vehicle Model written in Python.\n","ref":"/velocitas-docs/docs/tutorials/vehicle_model_creation/manual_model_creation/vehicle_model_distribution/distribution_python/","tags":"","title":"Python Vehicle Model Distribution"},{"body":"\n","categories":"","description":"Learn how to get started with Eclipse Velocitas™, including setting up the development environment, creating a Vehicle Model as well as developing, testing and deploying a Vehicle App.\n","excerpt":"Learn how to get started with Eclipse Velocitas™, including setting up …","ref":"/velocitas-docs/docs/tutorials/","tags":"","title":"Tutorials"},{"body":"Please visit first Getting Started page if you don’t know where to start.\n","categories":"","description":"Learn how to develop a new Vehicle App.\n","excerpt":"Learn how to develop a new Vehicle App.\n","ref":"/velocitas-docs/docs/tutorials/vehicle-app-development/","tags":"","title":"Vehicle App Development"},{"body":" Info On Friday, 2023-03-03 we released our new model lifecycle approach. With the update of the documentation the previous content of this page can be found in the section Manual Vehicle Model Creation now. A Vehicle Model makes it possible to easily get vehicle data from the KUKSA Data Broker and to execute remote procedure calls over gRPC against Vehicle Services and other Vehicle Apps. It is generated from the underlying semantic models based e.g. on the COVESA Vehicle Signal Specification (VSS). The model is generated for a concrete programming language as a graph-based, strongly-typed, intellisense-enabled library providing vehicle abstraction “on code level”.\nBy default our app templates now generate the vehicle model during the devContainer initialization - managed by the Velocitas life cycle management. The respective VSS-based model source is referenced in the app manifest allowing to freely choose the model being used in your project. You will find more details about this in section Automated Model Lifecycle.\nThe previous approach, using pre-generated model repositories, is deprecated as of now. But is still available and is described in section Manual Vehicle Model Creation. Please be aware, that you would either have to use template versions before the above mentioned release, or you need to adapt the newer versions of the template using the old approach.\n","categories":"","description":"Learn how creation of vehicle models work and how to adapt it to your needs.\n","excerpt":"Learn how creation of vehicle models work and how to adapt it to your …","ref":"/velocitas-docs/docs/tutorials/vehicle_model_creation/","tags":"","title":"Vehicle Model Creation"},{"body":"Thanks for thinking about contributing to Eclipse Velocitas. We really appreciate the time and effort you want to spend helping to improve Eclipse Velocitas.\nHowever, in order to get you started as fast as possible, we need to go through some organizational issues first.\nEclipse Contributor Agreement Before your contribution can be accepted by the project team, contributors must electronically sign the Eclipse Contributor Agreement (ECA).\nhttp://www.eclipse.org/legal/ECA.php Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.\nFor more information, please see the Eclipse Committer Handbook: https://www.eclipse.org/projects/handbook/#resources-commit\nMaking Your Changes Fork the repository on GitHub. Create a new branch for your changes. Make your changes following the code style guide (see Code Style Guide section above). When you create new files, make sure you include a proper license header at the top of the file (see License Header section below). Make sure you include test cases for non-trivial features. Make sure test cases provide sufficient code coverage (see GitHub actions for minimal accepted coverage). Make sure the test suite passes after your changes. Commit your changes into that branch. Use descriptive and meaningful commit messages. Start the first line of the commit message with the issue number and title e.g., [#9865] Add token-based authentication. Squash multiple commits that are related to each other semantically into a single one. Make sure you use the -s flag when committing as explained above. Push your changes to your branch in your forked repository. Adding Documentation to Hugo Add the markdown document to the appropriate folder in the path velocitas-docs/hugo/hugo/content. Add the front-matter --- title: \"title of the file\" date: 2022-05-09T13:43:25+05:30 --- Additional front matter that can be added – url : \"specifying a definite url to the file\" weight : 10 (used for ordering your content in lists. Lower weight gets higher precedence.) The images need to be put in path velocitas-docs/hugo/hugo/static/assets. The image reference should be /assets/image.jpg in the markdown file. (Note: Do not use relative paths or url) In case you are creating a new folder, create _index.md file with the front matter only. Running Locally Install hugo version 0.98.0 extended Release v0.98.0 · gohugoio/hugo (github.com) Install docsy theme in the path velocitas-docs/hugo/hugo/theme – #Run this command from the root directory of velocitas-docs git clone https://github.com/google/docsy.git hugo/hugo/themes/docsy Install pre-requisites cd themes/docsy/userguide/ npm install npm install --save-dev postcss Run the command hugo server visit localhost:1313 from the velocitas-docs/hugo/hugo directory to see the rendered static site. Submitting the Changes Submit a pull request via the normal GitHub UI.\nAfter Submitting Do not use your branch for any other development, otherwise further changes that you make will be visible in the PR. License Header Please make sure any file you newly create contains a proper license header like this:\n# Copyright (c) \u003cyear\u003e Contributors to the Eclipse Foundation # # See the NOTICE file(s) distributed with this work for additional # information regarding copyright ownership. # # This program and the accompanying materials are made available under the # terms of the Apache License 2.0 which is available at # http://www.apache.org/licenses/LICENSE-2.0 # # SPDX-License-Identifier: Apache-2.0 You should, of course, adapt this header to use the specific mechanism for comments pertaining to the type of file you create.\nImportant\nPlease do not forget to add your name/organization to the /legal/legal/NOTICE.md file’s Copyright Holders section. If this is not the first contribution you make, then simply update the time period contained in the copyright entry to use the year of your first contribution as the lower boundary and the current year as the upper boundary, e.g.,\nCopyright 2017, 2018 ACME Corporation\nBuild A pipeline run will be triggered on every PR merge. This run will trigger the hugo docs build Hugo v0.98.0 extended is set up for the runner docsy theme is setup for beautification of static site Then dependencies are installed for the theme Static site is generated and stored in a folder \"public\" The contents of public are committed to gh_pages branch which is exposed to host the GitHub pages ","categories":"","description":"Read how you can contribute to Eclipse Velocitas.\n","excerpt":"Read how you can contribute to Eclipse Velocitas.\n","ref":"/velocitas-docs/docs/contribution-guidelines/","tags":"","title":"Contribution Guidelines"},{"body":"","categories":"","description":"Learn how to run the _Vehicle App_ Runtime Services locally or in Kubernetes.\n","excerpt":"Learn how to run the _Vehicle App_ Runtime Services locally or in …","ref":"/velocitas-docs/docs/tutorials/vehicle-app-runtime/","tags":"","title":"Run Vehicle App Runtime Services"},{"body":"To be sure that a newly created Vehicle App will run together with the KUKSA Data Broker and potentially other dependant Vehicle Services or Vehicle Apps, it’s essential to write integration tests along with developing the app.\nTo execute an integration test, the dependant components need to be running and accessible from the test runner. This guide will describe how integration tests can be written and integrated in the CI pipeline so that they are executed automatically when building the application.\nWriting Test Cases To write an integration test, you should check the sample that comes with the template (/app/tests/integration/integration_test.py). To support interacting with the MQTT broker and the KUKSA Data Broker (to get and set values for DataPoints), there are two classes present in Python SDK that will help:\nMqttClient: this class provides methods for interacting with the MQTT broker. Currently, the following methods are available:\npublish_and_wait_for_response: publishes the specified payload to the given request topic and waits (till timeout) for a message to the response topic. The payload of the first message that arrives in the response topic will be returned. If the timeout expires before, an empty string (\"\") is returned.\npublish_and_wait_for_property: publishes the specified payload to the given request topic and waits (till timeout) until the given property value is found in an incoming message to the response topic. The path describes the property location within the response message, the value the property value to look for.\nExample:\n{ \"status\": \"success\", \"result\": { \"responsecode\": 10 } } If the responsecode property should be checked for the value 10, the path would be [\"result\", \"responsecode], property value would be 10. When the requested value has been found in a response message, the payload of that message will be returned. If the timeout expires before receiving a matching message, an empty string (\"\") is returned.\nThis class can be initialized with a given port. If no port is specified, the environment variable MQTT_PORT will be checked. If this is not possible either, the default value of 1883 will be used. It’s recommended to specify no port when initializing that class as it will locally use the default port 1883 and in CI the port set by the environment variable MQTT_PORT. This will prevent a check-in in the wrong port from local development.\nIntTestHelper: this class provides functionality to interact with the KUKSA Data Broker.\nregister_datapoint: registers a new datapoint with given name and type set_..._datapoint: set the given value for the datapoint with the given name (with given type). If the datapoint does not exist, it will be registered. This class can be initialized with a given port. If no port is specified, the environment variable VDB_PORT will be checked. If this is not possible either, the default value of 55555 will be used. It’s recommended to specify no port when initializing that class as it will locally use the default port 55555 and in CI the port set by the environment variable VDB_PORT which is set. This will prevent a check-in in the wrong port from local development.\nPlease make sure that you don’t check in the test classes with using local ports because then the execution in the CI workflow will fail (as the CI workflow uses Kubernetes execution for running integration tests).\nRuntime components To be able to test the Vehicle App in an integrated way, the following components should be running:\nDapr Mosquitto Data Broker Vehicle Services We distinguish between two environments for executing the Vehicle App and the runtime components:\nLocal execution: components are running locally in the development environment Kubernetes execution: components (and application) are deployed and running in a Kubernetes control plane (e.g., K3D) Local Execution First, make sure that the runtime services are configured and running like described here.\nThe application itself can be executed by using a Visual Studio Launch Config (by pressing F5) or by executing VehicleApp using provided task.\nWhen the runtime services and the application are running, integration tests can be executed locally.\nKubernetes execution (K3D) If you want to execute the integration tests in Kubernetes mode, make sure that K3D is up and running according to the documentation. Local ports for Mosquitto and KUKSA Data Broker are 1883/55555. In Kubernetes mode, the ports would be the locally exposed ports 31883/30555, to ensure that the tests connect to the containers, please execute the following commands in new bash terminal:\nexport MQTT_PORT=31883 \u0026\u0026 export VDB_PORT=30555 \u0026\u0026 pytest Integration Tests in CI pipeline The tests will be discovered and executed automatically in the CI pipeline. The job Run Integration Tests contains all steps to set up and execute tests in Kubernetes mode. The results are published as test results to the workflow.\nTroubleshooting Check if the services are registered correctly in Dapr Dapr extension is available as VS Code extension and gives overview of all running Dapr services. Troubleshoot IntTestHelper Make sure that the KUKSA Data Broker is up and running by checking the task log. Make sure that you are using the right ports for local/Kubernetes execution. Make sure that you installed the correct version of the SDK (SDV-package). Troubleshoot Mosquitto (MQTT Broker) Make sure that the Mosquitto up and running by checking the task log. Make sure that you are using the right ports for local/Kubernetes execution. Use VsMqtt extension to connect to MQTT broker (localhost:1883 (local) or localhost:31883 (Kubernetes)) to monitor topics in MQTT broker. Next steps Concept: Deployment Model Concept: Build and release process Tutorial: Deploy a Python Vehicle App with Helm ","categories":"","description":"Learn how to test that a _Vehicle App_ together with the KUKSA Data Broker and potentially other dependant Vehicle Services or Vehicle Apps runs as expected.\n","excerpt":"Learn how to test that a _Vehicle App_ together with the KUKSA Data …","ref":"/velocitas-docs/docs/tutorials/integration_tests/","tags":"","title":"Vehicle App Integration Testing"},{"body":"Setup a Python Package manually A Vehicle Model should be defined in its own Python Package. This allows to distribute the Vehicle Model later as a standalone package and to use it in different Vehicle App projects.\nThe name of the Vehicle Model package will be my_vehicle_model for this walkthrough.\nStart Visual Studio Code\nSelect File \u003e Open Folder (File \u003e Open… on macOS) from the main menu.\nIn the Open Folder dialog, create a my_vehicle_model folder and select it. Then click Select Folder (Open on macOS).\nCreate a new file setup.py under my_vehicle_model:\nfrom setuptools import setup setup(name='my_vehicle_model', version='0.1', description='My Vehicle Model', packages=['my_vehicle_model'], zip_safe=False) This is the Python package distribution script.\nCreate an empty folder my_vehicle_model under my_vehicle_model.\nCreate a new file __init__.py under my_vehicle_model/my_vehicle_model.\nAt this point the source tree of the Python package should look like this:\nmy_vehicle_model ├── my_vehicle_model │ └── __init__.py └── setup.py To verify that the package is created correctly, install it locally:\npip3 install . The output of the above command should look like this:\nDefaulting to user installation because normal site-packages is not writeable Processing /home/user/projects/my-vehicle-model Preparing metadata (setup.py) ... done Building wheels for collected packages: my-vehicle-model Building wheel for my-vehicle-model (setup.py) ... done Created wheel for my-vehicle-model: filename=my_vehicle_model-0.1-py3-none-any.whl size=1238 sha256=a619bc9fbea21d587f9f0b1c1c1134ca07e1d9d1fdc1a451da93d918723ce2a2 Stored in directory: /home/user/.cache/pip/wheels/95/c8/a8/80545fb4ff73c974ac1716a7bff6f7f753f92022c41c2e376f Successfully built my-vehicle-model Installing collected packages: my-vehicle-model Successfully installed my-vehicle-model-0.1 Finally, uninstall the package again:\npip3 uninstall my_vehicle_model Add Vehicle Models manually Install the Python Vehicle App SDK:\npip3 install git+https://github.com/eclipse-velocitas/vehicle-app-python-sdk.git The output of the above command should end with:\nSuccessfully installed sdv-x.y.z Now it is time to add some Vehicle Models to the Python package. At the end of this section you will have a Vehicle Model, that contains a Cabin model, a Seatmodel and has the following tree structure:\nVehicle └── Cabin └── Seat (Row, Pos) Create a new file Seat.py under my_vehicle_model/my_vehicle_model:\nfrom sdv.model import Model class Seat(Model): def __init__(self, parent): super().__init__(parent) self.Position = DataPointFloat(\"Position\", self) This creates the Seat model with a single data point of type float named Position.\nCreate a new file Cabin.py under my_vehicle_model/my_vehicle_model:\nfrom sdv.model import Model class Cabin(Model): def __init__(self, parent): super().__init__(parent) self.Seat = SeatCollection(\"Seat\", self) class SeatCollection(Model): def __init__(self, name, parent): super().__init__(parent) self.name = name self.Row1 = self.RowType(\"Row1\", self) self.Row2 = self.RowType(\"Row2\", self) def Row(self, index: int): if index \u003c 1 or index \u003e 2: raise IndexError(f\"Index {index} is out of range\") _options = { 1 : self.Row1, 2 : self.Row2, } return _options.get(index) class RowType(Model): def __init__(self, name, parent): super().__init__(parent) self.name = name self.Pos1 = Seat(\"Pos1\", self) self.Pos2 = Seat(\"Pos2\", self) self.Pos3 = Seat(\"Pos3\", self) def Pos(self, index: int): if index \u003c 1 or index \u003e 3: raise IndexError(f\"Index {index} is out of range\") _options = { 1 : self.Pos1, 2 : self.Pos2, 3 : self.Pos3, } return _options.get(index) This creates the Cabin model, which contains a set of six Seat models, referenced by their names or by rows and positions:\nrow=1, pos=1 row=1, pos=2 row=1, pos=3 row=2, pos=1 row=2, pos=2 row=2, pos=3 Create a new file vehicle.py under my_vehicle_model/my_vehicle_model:\nfrom sdv.model import Model from my_vehicle_model.Cabin import Cabin class Vehicle(Model): \"\"\"Vehicle model\"\"\" def __init__(self, name): super().__init__() self.name = name self.Speed = DataPointFloat(\"Speed\", self) self.Cabin = Cabin(\"Cabin\", self) vehicle = Vehicle(\"Vehicle\") The root model of the Vehicle Model tree should be called Vehicle by convention and is specified, by setting parent to None. For all other models a parent model must be specified as the 2nd argument of the Model constructor, as can be seen by the Cabin and the Seat models above.\nA singleton instance of the Vehicle Model called vehicle is created at the end of the file. This instance is supposed to be used in the Vehicle Apps. Creating multiple instances of the Vehicle Model should be avoided for performance reasons.\nAdd a Vehicle Service Vehicle Services provide service interfaces to control actuators or to trigger (complex) actions. E.g. they communicate with the vehicle internal networks like CAN or Ethernet, which are connected to actuators, electronic control units (ECUs) and other vehicle computers (VCs). They may provide a simulation mode to run without a network interface. Vehicle Services may feed data to the Data Broker and may expose gRPC endpoints, which can be invoked by Vehicle Apps over a Vehicle Model.\nIn this section, we add a Vehicle Service to the Vehicle Model.\nCreate a new folder proto under my_vehicle_model/my_vehicle_model.\nCopy your proto file under my_vehicle_model/my_vehicle_model/proto\nAs example you could use the protocol buffers message definition seats.proto provided by the KUKSA VAL services which describes a seat control service.\nInstall the grpcio tools including mypy types to generate the python classes out of the proto-file:\npip3 install grpcio-tools mypy_protobuf Generate Python classes from the SeatService message definition:\npython3 -m grpc_tools.protoc -I my_vehicle_model/proto --grpc_python_out=./my_vehicle_model/proto --python_out=./my_vehicle_model/proto --mypy_out=./my_vehicle_model/proto my_vehicle_model/proto/seats.proto This creates the following grpc files under the proto folder:\nseats_pb2.py seats_pb2_grpc.py seats_pb2.pyi Create the SeatService class and wrap the gRPC service:\nfrom sdv.model import Service from my_vehicle_model.proto.seats_pb2 import ( CurrentPositionRequest, MoveComponentRequest, MoveRequest, Seat, SeatComponent, SeatLocation, ) from my_vehicle_model.proto.seats_pb2_grpc import SeatsStub class SeatService(Service): \"SeatService model\" def __init__(self): super().__init__() self._stub = SeatsStub(self.channel) async def Move(self, seat: Seat): response = await self._stub.Move(MoveRequest(seat=seat), metadata=self.metadata) return response async def MoveComponent( self, seatLocation: SeatLocation, component: SeatComponent, position: int, ): response = await self._stub.MoveComponent( MoveComponentRequest( seat=seatLocation, component=component, # type: ignore position=position, ), metadata=self.metadata, ) return response async def CurrentPosition(self, row: int, index: int): response = await self._stub.CurrentPosition( CurrentPositionRequest(row=row, index=index), metadata=self.metadata, ) return response Some important remarks about the wrapping SeatService class shown above:\nThe SeatService class must derive from the Service class provided by the Python SDK. The SeatService class must use the grpc channel from the Service base class and provide it to the _stub in the __init__ method. This allows the SDK to manage the physical connection to the grpc service and use service discovery of the middleware. Every method needs to pass the metadata from the Service base class to the gRPC call. This is done by passing the self.metadata argument to the metadata of the gRPC call. ","categories":"","description":"Learn how to create a Vehicle Model manually for python\n","excerpt":"Learn how to create a Vehicle Model manually for python\n","ref":"/velocitas-docs/docs/tutorials/vehicle_model_creation/manual_model_creation/manual_creation_python/","tags":"","title":"Python Manual Vehicle Model Creation"},{"body":"This tutorial will show you how to:\nPrepare PodSpecs Deploy your Vehicle App to local K3D Prerequisites Completed the tutorial How to create a vehicle app Use the sample PodSpecs If the Vehicle App has been created from one of our template repositories, a sample PodSpec is already available inside our maintained runtime-k3d of the devenv-runtimes package at ./runtime-k3d/src/app_deployment/config/podspec/ and can be used as it is without any modification. Another example can also be found in the documentation of Leda.\nContent Looking at the content of the sample-podspec, it is starting with some general information about the app and the dapr configuration. You can define e.g. the app-port and the log-level. You could also add more labels to your app, which might help to identify the app for later usages.\napiVersion: v1 kind: Pod metadata: name: sampleapp annotations: dapr.io/enabled: \"true\" dapr.io/app-id: sampleapp dapr.io/app-port: \"50008\" dapr.io/app-protocol: grpc dapr.io/log-level: info labels: app: sampleapp Afterwards the configuration of the container is specified. Please be aware that the container-port should match the app-port from the dapr-config above. In the example the app-id of the VehicleDataBroker is also specified, since the app wants to connect to it. Last but not least the image is defined which should be used for the deployment. In this example the local registry is used, which is created during the configuration of the controlplane (see here for details).\nspec: containers: - name: sampleapp imagePullPolicy: IfNotPresent ports: - containerPort: 50008 env: - name: VEHICLEDATABROKER_DAPR_APP_ID value: \"vehicledatabroker\" image: k3d-registry.localhost:12345/sampleapp:local Note Please make sure that you already pushed your image to the local registry before trying to deploy it. If you used the provided task (see here for details) to build your app, you can use the following command:\ndocker push localhost:12345/sampleapp:local Local registry or remote registry In the example above we used the local registry, but you can also define a remote registry in the image tag, e.g.\nimage: ghcr.io/eclipse-velocitas/vehicle-app-python-template/sampleapp:0.1.0 If your registry is not public, you might to add secrets to your Kubernets config, see the official documentation for details. Afterwards you have to add the secrets also to the PodSpec:\nimagePullSecrets: - name: regcred Deploy your Vehicle App to local K3D Prerequisites A local K3D installation must be available. For how to setup K3D, check out this tutorial. Make sure that there is no running VehicleApp with the same name and configuration deployed on your K3D environment. Deploying your app with PodSpecs can be done with one simple command:\nkubectl apply -f \u003cpodspec.yaml\u003e\nIn parallel you can check with K9S if the deployment is working correctly.\nNext steps Tutorial: Start runtime services locally Concept: Build and release process ","categories":"","description":"Learn how to prepare PodSpecs for the deployment of a Vehicle App.\n","excerpt":"Learn how to prepare PodSpecs for the deployment of a Vehicle App.\n","ref":"/velocitas-docs/docs/tutorials/tutorial_how_to_deploy_a_vehicle_app_with_podspecs/","tags":"","title":"Vehicle App Deployment with PodSpecs"},{"body":"This tutorial will show you how to:\nPrepare a Helm chart Deploy your Vehicle App to local K3D Prerequisites Devcontainer is up and running. Completed the tutorial How to create a vehicle app Use the sample Helm chart If the Vehicle App has been created from one of our template repositories, a sample Helm chart is already available inside our maintained runtime-k3d of the devenv-runtimes package at ./runtime-k3d/src/app_deployment/config/helm/ and can be used as it is without any modification. This sample chart is using the values from ./runtime-k3d/src/app_deployment/config/helm/values.yaml file.\nNote The same app name as defined in ./app/AppManifest.json will be used for the deployment The app port is configurable as vehicleAppPort inside your .velocitas.json variables section. If not set there, the default value is 50008 - as defined in manifest.json of the devenv-runtimes package. Prepare a new Helm chart If you would like to write a new helm chart, this section will guide you to adapt and deploy a new vehicle app, which is called my_vehicle_app for this walkthrough.\nStart Visual Studio Code and open the previously created Vehicle App repository.\nCreate a new folder my_vehicle_app under deploy\nCopy all files from the devenv-runtimes/runtime-k3d/src/app_deployment/config/helm folder to the new folder deploy/my_vehicle_app.\nRename the file deploy/my_vehicle_app/helm/templates/vehicleapp.yaml to deploy/my_vehicle_app/helm/templates/my_vehicle_app.yaml\nOpen deploy/my_vehicle_app/helm/Chart.yaml and change the name of the chart to my_vehicle_app and provide a meaningful description.\napiVersion: v2 name: my-vehicle-app description: Short description for my-vehicle-app # A chart can be either an 'application' or a 'library' chart. # # Application charts are a collection of templates that can be packaged into versioned archives # to be deployed. # # Library charts provide useful utilities or functions for the chart developer. They're included as # a dependency of application charts to inject those utilities and functions into the rendering # pipeline. Library charts do not define any templates and cannot be deployed as a result. type: application # This is the chart version. This version number should be incremented each time you make changes # to the chart and its templates, including the app version. # Versions are expected to follow Semantic Versioning (https://semver.org/) version: 0.1.0 # This is the version number of the application being deployed. This version number should be # incremented each time you make changes to the application. Versions are not expected to # follow Semantic Versioning. They should reflect the version the application is using. appVersion: 1.16.0 Open deploy/my_vehicle_app/helm/values.yaml and change name, repository and daprAppid to my-vehicle-app. Rename the root node from imageVehicleApp to imageMyVehicleApp.\nimageMyVehicleApp: name: my-vehicle-app repository: k3d-registry.localhost:12345/my-vehicle-app pullPolicy: Always # Overrides the image tag whose default is the chart appVersion. tag: \"#SuccessfulExecutionOfReleaseWorkflowUpdatesThisValueToReleaseVersionWithoutV#\" daprAppid: my-vehicle-app daprPort: 50008 nameOverride: \"\" fullnameOverride: \"\" Open deploy/my_vehicle_app/helm/templates/my_vehicle_app.yaml and replace imageVehicleApp with imageMyVehicleApp:\napiVersion: apps/v1 kind: Deployment metadata: name: {{.Values.imageMyVehicleApp.name}} labels: app: {{.Values.imageMyVehicleApp.name}} spec: selector: matchLabels: app: {{.Values.imageMyVehicleApp.name}} template: metadata: annotations: dapr.io/enabled: \"true\" dapr.io/app-id: \"{{.Values.imageMyVehicleApp.daprAppid}}\" dapr.io/app-port: \"{{.Values.imageMyVehicleApp.daprPort}}\" dapr.io/log-level: \"debug\" dapr.io/config: \"config\" dapr.io/app-protocol: \"grpc\" labels: app: {{.Values.imageMyVehicleApp.name}} {{- include \"helm.selectorLabels\" . | nindent 8 }} spec: containers: - name: {{.Values.imageMyVehicleApp.name}} image: \"{{ .Values.imageMyVehicleApp.repository }}:{{ .Values.imageMyVehicleApp.tag | default .Chart.AppVersion }}\" imagePullPolicy: {{ .Values.imageMyVehicleApp.pullPolicy }} At this point, the Helm chart is prepared for the next step and the folder structure under deploy/my_vehicle_app should look like this:\ndeploy ├── my_vehicle_app │ └── helm │ └── templates │ └── _helpers.tpl │ └── my_vehicle_app.yaml │────────── .helmignore │────────── Chart.yaml └────────── values.yaml Deploy your Vehicle App to local K3D Prerequisites A local K3D installation must be available. For how to setup K3D, check out this tutorial. After the Helm chart has been prepared, you can deploy it to the local K3D cluster by following the steps:\nBuilding and pushing the Docker image for your Vehicle App DOCKER_BUILDKIT=1 docker build -f ./app/Dockerfile --progress=plain -t localhost:12345/my-vehicle-app:local . --no-cache docker push localhost:12345/my-vehicle-app:local Installing the Helm Chart helm install my-vapp-chart ./deploy/my_vehicle_app --values ./deploy/my_vehicle_app/values.yaml --wait --timeout 60s These steps are building the local source code of the application into a container, pushing it to the local cluster registry and deploying the app via a helm chart to the K3D cluster. Rerun the steps after you have changed the source code of your application to re-deploy with the latest changes.\nIf you have issues installing the helm chart again try uninstalling the chart upfront:\nhelm uninstall my-vapp-chart Next steps Tutorial: Start runtime services locally Concept: Build and release process ","categories":"","description":"Learn how to prepare a Helm chart for the deployment of a Vehicle App.\n","excerpt":"Learn how to prepare a Helm chart for the deployment of a Vehicle App. …","ref":"/velocitas-docs/docs/tutorials/tutorial_how_to_deploy_a_vehicle_app_with_helm/","tags":"","title":"Vehicle App Deployment with Helm"},{"body":"","categories":"","description":"Learn how to distribute a Vehicle Model.\n","excerpt":"Learn how to distribute a Vehicle Model.\n","ref":"/velocitas-docs/docs/tutorials/vehicle_model_creation/manual_model_creation/vehicle_model_distribution/","tags":"","title":"Vehicle Model Distribution"},{"body":"Traditionally, the automotive industry was and still is centered around vehicle hardware and the corresponding hardware development and life-cycle management. Software, however, is gaining more and more importance in vehicle development and over the entire vehicle lifetime. Thus, the vehicle and its value to the customer is increasingly defined by software. This transition towards what are termed as software-defined vehicles changes the way in which we innovate, code, deliver and work together. It is a change across the whole mobility value chain and life-cycle: from development and production to delivery and operations of the vehicle.\n","categories":"","description":"","excerpt":"Traditionally, the automotive industry was and still is centered …","ref":"/velocitas-docs/docs/","tags":"","title":"Velocitas"},{"body":"Besides local execution of the vehicle runtime components, another way is to deploy them as containers in a Kubernetes control plane (like K3D). To create a K3D instance, we provide Visual Studio Code Tasks, a feature of Visual Studio Code. Additional information on tasks can be found here.\nQuick Start: Each step has a task that is defined in /.vscode/tasks.json:\nCore tasks (dependent on each other in the given order): K3D - Runtime Up: Starts up the K3D runtime (Including configuring control plane and initializing dapr). K3D - Build VehicleApp: Builds the VehicleApp. K3D - Deploy VehicleApp: Deploys the VehicleApp via Helm to the K3D cluster. Each task has the required dependencies defined. If you want to run the runtime in K3D, the task K3D - Deploy VehicleApp will create and configure everything. So it’s enough to run that task.\nOptional helper tasks: K3D - Deploy VehicleApp (without rebuild): Deploys the VehicleApp via Helm to the K3D cluster (without rebuilding it). That requires, that the task K3D - Build VehicleApp has been executed once before. K3D - Runtime Down: Uninstalls and removes K3D runtime configuration. K3D is configured so that Mosquitto and the KUKSA Data Broker can be reached from outside the container over the ports 31883 (Mosquitto) and 30555(KUKSA Data Broker). The test runner, that is running outside of the cluster, can interact with these services over those ports.\nTo check the status of your K3D instance (running pods, containers, logs, …) you can either use the kubectl utility or start K9s in a terminal window to have a terminal UI for interacting with the cluster.\nRun as Bundle: To orchestrate these tasks, you can use the task K3D - Deploy VehicleApp. This task runs the other tasks in the correct order. You can run this task by clicking F1 and choose Tasks: Run task, then select K3D - Deploy VehicleApp.\nTasks Management: Visual Studio Code offers various other commands concerning tasks like Start/Terminate/Restart/… You can access them by pressing F1 and typing task. A list with available task commands will appear.\nLogging: Running tasks appear in the Terminals View of Visual Studio Code. From there, you can see the logs of each running task. More detailed logs can be found inside your workspace’s logs directory ./logs/*\nUploading files to persistentVolume Some applications (e.g. FeederCAN) might make it necessary to load custom files from mounted volume. For that reason, persistentVolume is created in k3d cluster. All the files that are located in [./config/feedercan](https://github.com/eclipse-velocitas/devenv-runtimes/tree/main/config/feedercan) will be uploaded to the k3d cluster dynamically. In order to mount files to the directory that is accessible by the application, please refer to the deployment configuration file: runtime-k3d/src/runtime/deployment/config/helm/templates/persistentVolume.yaml.\nChanges in ./config/feedercan are automatically reflected in PersistentVolume.\nUploading custom candump file to FeederCAN FeederCAN requires candump file. Pre-defined candump file is part of docker container release, however, if necessary, there is an option to upload the custom file by:\nCreating/updating candump file with the name candumpDefault.log in ./config/feedercan Recreating the feedercan pod: kubectl delete pods -l app=feedercan More information about FeederCan can be found here\nNext steps Tutorial: Start runtime services locally Tutorial: Setup and Explore Development Environment Concept: Deployment Model Concept: Build and release process Tutorial: Deploy a Python Vehicle App with Helm ","categories":"","description":"","excerpt":"Besides local execution of the vehicle runtime components, another way …","ref":"/velocitas-docs/docs/tutorials/vehicle-app-runtime/run_runtime_services_kubernetes/","tags":"","title":"Run runtime services in Kubernetes"},{"body":"","categories":"","description":"","excerpt":"","ref":"/velocitas-docs/categories/","tags":"","title":"Categories"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/velocitas-docs/community/","tags":"","title":"Community"},{"body":"","categories":"","description":"","excerpt":"","ref":"/velocitas-docs/tags/","tags":"","title":"Tags"},{"body":" Eclipse Velocitas™ Toolchain for creating containerized in-vehicle applications\nConcepts Tutorials The Eclipse project Velocitas™ provides an end-to-end, scalable and modular development toolchain to create containerized in-vehicle applications (Vehicle Apps) that offers a comfortable, fast and efficient development experience to increase the velocity of a development team. Vehicle App Project Template Quick setup of a Vehicle App project with the help of GitHub templates for the supported programming languages including a sample Vehicle App and GitHub Actions workflow, and comfortable setup of the development environment e.g. in Microsoft Visual Studio Code.\nRead more …\nVehicle App Development Model Simplify coding and debugging of Vehicle Apps that access vehicle data points and call vehicle functions using the provided SDK for the different programming languages that delegates to the Vehicle Abstraction Layer.\nRead more …\nVehicle Abstraction Layer Abstracts vehicle make \u0026 model specific properties and capabilities to a common representation. This makes it possible for Vehicle Apps to be portable across different electric and electronic vehicle architectures e.g. the Vehicle Apps do not care whether the seat is controlled via CAN, LIN or some other physical interface.\nRead more …\nGitHub Actions Workflow Blueprint Providing ready-to-use GitHub workflows to check the Vehicle App, build images for multi architectures, scan it, execute integration tests and release the Vehicle App to allow the developer to focus on the development of the Vehicle App.\nRead more …\nAutomated Release Process Providing a release workflow to generate release artifacts and documentation out of the CI workflow results and push it to the GitHub container registry to be used by a deployment system.\nRead more …\nDeployment Model Running and deploying Vehicle App as OCI-compliant container to increase the flexibility to support different programming languages and runtimes to accelerate innovation and development.\nRead more …\n","categories":"","description":"Toolchain for fast and easy development of vehicle applications for OEMs and suppliers","excerpt":"Toolchain for fast and easy development of vehicle applications for …","ref":"/velocitas-docs/","tags":"","title":"Velocitas™"}]