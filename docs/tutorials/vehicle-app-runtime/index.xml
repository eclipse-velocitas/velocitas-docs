<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Velocitas â€“ Run Vehicle App Runtime Services</title>
    <link>/velocitas/docs/tutorials/vehicle-app-runtime/</link>
    <description>Recent content in Run Vehicle App Runtime Services on Velocitas</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 May 2022 13:43:25 +0530</lastBuildDate>
    
	  <atom:link href="/velocitas/docs/tutorials/vehicle-app-runtime/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Run runtime services locally</title>
      <link>/velocitas/docs/tutorials/vehicle-app-runtime/run_runtime_services_locally/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      
      <guid>/velocitas/docs/tutorials/vehicle-app-runtime/run_runtime_services_locally/</guid>
      <description>
        
        
        &lt;h2 id=&#34;using-tasks-in-visual-studio-code&#34;&gt;Using tasks in Visual Studio Code&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Overview:&lt;/strong&gt; If you are developing in Visual Studio Code, the runtime components (like &lt;em&gt;KUKSA Data Broker&lt;/em&gt; or &lt;em&gt;Vehicle Services&lt;/em&gt;) are available for local execution as &lt;em&gt;Tasks&lt;/em&gt;, a feature of the Visual Studio Code. Additional information on tasks can be found &lt;a href=&#34;https://code.visualstudio.com/docs/editor/tasks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick Start:&lt;/strong&gt; Each component has a task that is defined in &lt;em&gt;.vscode/tasks.json&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dapr (&lt;code&gt;Local - Ensure Dapr&lt;/code&gt;): installs Dapr CLI and initializes Dapr if required&lt;/li&gt;
&lt;li&gt;Mosquitto (&lt;code&gt;Local - Mosquitto&lt;/code&gt;): runs &lt;em&gt;Mosquitto&lt;/em&gt; as a container (&lt;code&gt;docker run&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;KUKSA Data Broker (&lt;code&gt;Local - VehicleDataBroker&lt;/code&gt;): downloads and runs &lt;em&gt;KUKSA Data Broker&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;(Optional) Seat Service (&lt;code&gt;Local - SeatService&lt;/code&gt;): downloads and runs &lt;em&gt;Seat Service&lt;/em&gt;, an example &lt;code&gt;Vehicle Service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(Optional) Feeder Can (&lt;code&gt;Local - FeederCan&lt;/code&gt;): downloads and runs &lt;em&gt;FeederCAN&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Run as Bundle:&lt;/strong&gt; To orchestrate these tasks, a task called &lt;code&gt;Start Vehicle App runtime&lt;/code&gt; is available. This task runs the other tasks in the correct order. You can run this task by clicking &lt;code&gt;F1&lt;/code&gt; and choose &lt;code&gt;Tasks: Run task&lt;/code&gt;, then select &lt;code&gt;Start Vehicle App runtime&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tasks Management:&lt;/strong&gt; Visual Studio Code offers various other commands concerning tasks like Start/Terminate/Restart/&amp;hellip; You can access them by pressing F1 and typing &lt;code&gt;task&lt;/code&gt;. A list with available task commands will appear.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logging:&lt;/strong&gt; Running tasks appear in the Terminals View of Visual Studio Code. From there, you can see the logs of each running task.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scripting:&lt;/strong&gt; The tasks itself are executing scripts that are located in &lt;code&gt;.vscode/scripts&lt;/code&gt;. These scripts download the specified version of the runtime components and execute them along with Dapr. The same mechanism can be used to register additional services or prerequisites by adding new task definitions in the &lt;code&gt;tasks.json&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&#34;change-version-of-runtime-services&#34;&gt;Change version of runtime services&lt;/h2&gt;
&lt;p&gt;The version for the runtime services is defined in the file &lt;a href=&#34;https://github.com/eclipse-velocitas/vehicle-app-python-template/blob/main/prerequisite_settings.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;./prerequisite_settings.json&lt;/code&gt;&lt;/a&gt;. If you want to update the version, change it within the file and re-run the runtime services by restarting the tasks or the script.&lt;/p&gt;
&lt;h2 id=&#34;using-kuksa-data-broker-cli&#34;&gt;Using KUKSA Data Broker CLI&lt;/h2&gt;
&lt;p&gt;A CLI tool is provided for the interact with a running instance of the KUKSA Data Broker. It can be started by running the task &lt;code&gt;Local - VehicleDataBroker CLI&lt;/code&gt;(by pressing &lt;em&gt;F1&lt;/em&gt;, type &lt;em&gt;Run Task&lt;/em&gt; followed by &lt;code&gt;Local - VehicleDataBroker CLI&lt;/code&gt;). The &lt;em&gt;KUKSA Data Broker&lt;/em&gt; needs to be running for you to be able to use the tool.&lt;/p&gt;
&lt;h2 id=&#34;integrating-a-new-service-into-visual-studio-code-task&#34;&gt;Integrating a new service into Visual Studio Code Task&lt;/h2&gt;
&lt;p&gt;Integration of a new service can be done by duplicating one of the existing tasks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new script based on template script &lt;code&gt;.vscode/scripts/run-vehicledatabroker.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;.vscode/tasks.json&lt;/code&gt;, duplicate section from task &lt;code&gt;run-vehicledatabroker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Correct names in a new code block&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; &lt;code&gt;Problem Matcher&lt;/code&gt; defined in &lt;code&gt;tasks.json&lt;/code&gt; is a feature of the Visual Studio Code Task, to ensure that the process runs in background&lt;/li&gt;
&lt;li&gt;Run task using &lt;code&gt;[F1 -&amp;gt; Tasks: Run Task -&amp;gt; &amp;lt;Your new task name&amp;gt;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Task should be visible in Terminal section of Visual Studio Code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;task-codeblock-helper&#34;&gt;Task CodeBlock helper&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;lt;__CHANGEIT: Task name__&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;./.vscode/scripts/&amp;lt;__CHANGEIT: Script Name.sh__&amp;gt; --task&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;presentation&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;reveal&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;always&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;panel&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dedicated&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;isBackground&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;problemMatcher&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;pattern&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;regexp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;background&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;activeOnStart&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;beginsPattern&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;^&amp;lt;__CHANGEIT: Regex log from your app, decision to send process in background__&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;endsPattern&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Problem description:&lt;/strong&gt; When integrating new services into an existing dev environment, it is highly recommended to use the Visual Studio Code Task Feature.
A new service can be easily started by calling it from bash script, however restarting the same service might lead to port conflicts (GRPC Port or APP port). That can be easily avoided by using the Visual Studio Code Task Feature.&lt;/p&gt;
&lt;h3 id=&#34;codespaces&#34;&gt;Codespaces&lt;/h3&gt;
&lt;p&gt;If you are using Codespaces, remember that you are working on a remote agent. That&amp;rsquo;s why it could happen that the tasks are already running in the background. If that&amp;rsquo;s the case a new start of the tasks will fail, since the ports are already in use. In the Dapr-tab of the sidebar you can check if there are already tasks running. Another possibility to check if the processes are already running, is to check which ports are already open. Check the Ports-tab to view all open ports (if not already open, hit &lt;code&gt;F1&lt;/code&gt; and enter &lt;code&gt;View: Toggle Ports&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tutorial: &lt;a href=&#34;/velocitas/velocitas/docs/tutorials/run_runtime_services_kubernetes.md&#34;&gt;Deploy runtime services in local Kubernetes cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tutorial: &lt;a href=&#34;/velocitas/velocitas/docs/tutorials/quickstart&#34;&gt;Setup and Explore Development Enviroment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Concept: &lt;a href=&#34;/velocitas/velocitas/docs/concepts/deployment-model.md&#34;&gt;Deployment Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Concept: &lt;a href=&#34;/velocitas/velocitas/docs/concepts/vehicle_app_releases&#34;&gt;Build and release process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tutorial: &lt;a href=&#34;/velocitas/velocitas/docs/tutorials/tutorial_how_to_deploy_a_vehicle_app_with_helm.md&#34;&gt;Deploy a Python Vehicle App with Helm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Run runtime services in Kubernetes</title>
      <link>/velocitas/docs/tutorials/vehicle-app-runtime/run_runtime_services_kubernetes/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      
      <guid>/velocitas/docs/tutorials/vehicle-app-runtime/run_runtime_services_kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;Besides &lt;a href=&#34;/velocitas/velocitas/docs/run_runtime_services_locally.md&#34;&gt;local execution&lt;/a&gt; of the vehicle runtime components, another way is to deploy them as containers in a Kubernetes control plane (like K3D). To create a K3D instance, we provide Visual Studio Code &lt;em&gt;Tasks&lt;/em&gt;, a feature of Visual Studio Code. Additional information on tasks can be found &lt;a href=&#34;https://code.visualstudio.com/docs/editor/tasks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick Start:&lt;/strong&gt; Each step has a task that is defined in &lt;em&gt;.vscode/tasks.json&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core tasks (dependent on each other in the given order):
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;K3D - Install prerequisites&lt;/code&gt;: Install prerequisite components K3D, Helm, KubeCTL and Dapr without configuring them.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;K3D - Configure control plane&lt;/code&gt;: Creates a local container registry used by K3D as well as an K3D cluster with Dapr enabled.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;K3D - Deploy runtime&lt;/code&gt;: Deploys the runtime components (like KUKSA Data Broker, Seat Service, &amp;hellip;) within the K3D cluster.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;K3D - Build VehicleApp&lt;/code&gt;: Builds the VehicleApp and pushes it to the local K3D registry.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;K3D - Deploy VehicleApp&lt;/code&gt;: Builds and deploys the VehicleApp via Helm to the K3D cluster.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each task has the required dependencies defined. If you want to run the runtime in K3D, the task &lt;code&gt;K3D - Deploy VehicleApp&lt;/code&gt; will create and configure everything. So it&amp;rsquo;s enough to run that task.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optional helper tasks:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;K3D - Deploy VehicleApp (without rebuild)&lt;/code&gt;: Deploys the VehicleApp via Helm to the K3D cluster (without rebuilding it). That requires, that the task &lt;code&gt;K3D - Build VehicleApp&lt;/code&gt; has been executed once before.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;K3D - Install tooling&lt;/code&gt;: Installs tooling for local debugging (K9s)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;K3D - Uninstall runtime&lt;/code&gt;: Uninstalls the runtime components from the K3D cluster (without deleting the cluster).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;K3D - Reset control plane&lt;/code&gt;: Deletes the K3D cluster and the registry with all deployed pods/services.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;K3D is configured so that &lt;em&gt;Mosquitto&lt;/em&gt; and the &lt;em&gt;KUKSA Data Broker&lt;/em&gt; can be reached from outside the container over the ports &lt;code&gt;31883&lt;/code&gt; (Mosquitto) and &lt;code&gt;30555&lt;/code&gt;(KUKSA Data Broker). The test runner, that is running outside of the cluster, can interact with these services over those ports.&lt;/p&gt;
&lt;p&gt;To check the status of your K3D instance (running pods, containers, logs, &amp;hellip;) you can either use the &lt;code&gt;kubectl&lt;/code&gt; utility or start &lt;em&gt;K9s&lt;/em&gt; (after running the task &lt;code&gt;K3D - Install tooling&lt;/code&gt; once) in a terminal window to have a UI for interacting with the cluster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run as Bundle:&lt;/strong&gt; To orchestrate these tasks, a task called &lt;code&gt;K3D - Deploy VehicleApp&lt;/code&gt; is available. This task runs the other tasks in the correct order. You can run this task by clicking &lt;code&gt;F1&lt;/code&gt; and choose &lt;code&gt;Tasks: Run task&lt;/code&gt;, then select &lt;code&gt;K3D - Deploy VehicleApp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tasks Management:&lt;/strong&gt; Visual Studio Code offers various other commands concerning tasks like Start/Terminate/Restart/&amp;hellip; You can access them by pressing F1 and typing &lt;code&gt;task&lt;/code&gt;. A list with available task commands will appear.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logging:&lt;/strong&gt; Running tasks appear in the Terminals View of Visual Studio Code. From there, you can see the logs of each running task.&lt;/p&gt;
&lt;h2 id=&#34;uploading-files-to-persistentvolume&#34;&gt;Uploading files to persistentVolume&lt;/h2&gt;
&lt;p&gt;Some applications (e.g. FeederCAN) might make it necessary to load custom files from mounted volume. For that reason, persistentVolume is created in k3d cluster.
All the files that are located in &lt;code&gt;deploy/runtime/k3d/volume&lt;/code&gt; will be uploaded to the k3d cluster dynamically. In order to mount files to the directory that is accessible by the application, please refer to the deployment configuration file: &lt;a href=&#34;https://github.com/eclipse-velocitas/vehicle-app-python-template/blob/main/scripts/k3d/helm/templates/persistentVolume.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;deploy/runtime/k3d/helm/templates/bash.yaml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Changes in &lt;code&gt;deploy/runtime/k3d/volume&lt;/code&gt; are automatically reflected in PersistentVolume.&lt;/p&gt;
&lt;h3 id=&#34;uploading-custom-candump-file-to-feedercan&#34;&gt;Uploading custom candump file to FeederCAN&lt;/h3&gt;
&lt;p&gt;FeederCAN requires candump file. Pre-defined candump file is part of docker container release, however, if necessary, there is an option to upload the custom file by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creating/updating candump file with with name &lt;code&gt;candump&lt;/code&gt; in &lt;code&gt;deploy/runtime/k3d/volume&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Recreating the feedercan pod: &lt;code&gt;kubectl delete pods -l app=feedercan&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More information about FeederCan can be found &lt;a href=&#34;https://github.com/eclipse/kuksa.val.feeders/tree/main/dbc2val&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tutorial: &lt;a href=&#34;/velocitas/velocitas/docs/tutorials/run_runtime_services_locally.md&#34;&gt;Start runtime services locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tutorial: &lt;a href=&#34;/velocitas/velocitas/docs/tutorials/setup_and_explore_development_environment.md&#34;&gt;Setup and Explore Development Enviroment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Concept: &lt;a href=&#34;/velocitas/velocitas/docs/concepts/deployment-model.md&#34;&gt;Deployment Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Concept: &lt;a href=&#34;/velocitas/velocitas/docs/concepts/vehicle_app_releases&#34;&gt;Build and release process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tutorial: &lt;a href=&#34;/velocitas/velocitas/docs/tutorials/tutorial_how_to_deploy_a_vehicle_app_with_helm.md&#34;&gt;Deploy a Python Vehicle App with Helm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
