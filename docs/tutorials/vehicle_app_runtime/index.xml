<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Velocitas â€“ Vehicle App Runtime</title>
    <link>/velocitas-docs/docs/tutorials/vehicle_app_runtime/</link>
    <description>Recent content in Vehicle App Runtime on Velocitas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 09 May 2022 13:43:25 +0530</lastBuildDate>
    
	  <atom:link href="/velocitas-docs/docs/tutorials/vehicle_app_runtime/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Local Runtime</title>
      <link>/velocitas-docs/docs/tutorials/vehicle_app_runtime/local_runtime/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      
      <guid>/velocitas-docs/docs/tutorials/vehicle_app_runtime/local_runtime/</guid>
      <description>
        
        
        &lt;h2 id=&#34;using-tasks-in-visual-studio-code&#34;&gt;Using tasks in Visual Studio Code&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Overview:&lt;/strong&gt; If you are developing in Visual Studio Code, the runtime components (like &lt;em&gt;KUKSA Databroker&lt;/em&gt; or &lt;em&gt;Vehicle Services&lt;/em&gt;) are available for local execution coming from our &lt;em&gt;devenv-runtimes&lt;/em&gt; package and are accessible as &lt;em&gt;Tasks&lt;/em&gt;, a feature of the Visual Studio Code. Additional information on tasks can be found 

&lt;a href=&#34;https://code.visualstudio.com/docs/editor/tasks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Start local runtime:&lt;/strong&gt; To start local runtime, a task called &lt;code&gt;Local Runtime - Up&lt;/code&gt; is available. This task runs the runtime services in the correct order. You can run this task by clicking &lt;code&gt;F1&lt;/code&gt; and choose &lt;code&gt;Tasks: Run task&lt;/code&gt;, then select &lt;code&gt;Local Runtime - Up&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stop local runtime:&lt;/strong&gt; To stop local runtime, a task called &lt;code&gt;Local Runtime - Down&lt;/code&gt; is available. This task stops running runtime services gracefully. You can run this task by clicking &lt;code&gt;F1&lt;/code&gt; and choose &lt;code&gt;Tasks: Run task&lt;/code&gt;, then select &lt;code&gt;Local Runtime - Down&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tasks Management:&lt;/strong&gt; Visual Studio Code offers various other commands concerning tasks like Start/Terminate/Restart/&amp;hellip; You can access them by pressing F1 and typing &lt;code&gt;task&lt;/code&gt;. A list with available task commands will appear.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logging:&lt;/strong&gt; Running tasks appear in the Terminals View of Visual Studio Code. From there, you can see the logs of each running task. More detailed logs can be found inside your workspace&amp;rsquo;s logs directory &lt;code&gt;./logs/*&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;addchange-runtime-service-configuration&#34;&gt;Add/Change runtime service configuration&lt;/h2&gt;
&lt;p&gt;The configuration for services of our provided local runtime are defined in the 

&lt;a href=&#34;https://github.com/eclipse-velocitas/devenv-runtimes/blob/main/runtime.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;runtime.json&lt;/code&gt;&lt;/a&gt;
 at the root of the repository 

&lt;a href=&#34;https://github.com/eclipse-velocitas/devenv-runtimes/tree/main&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;devenv-runtimes&lt;/a&gt;
.
For a more detailed view on how to change or add runtime service configuration, please visit: 

&lt;a href=&#34;/velocitas-docs/velocitas-docs//docs/concepts/lifecycle_management/packages/development/#configuration-of-runtime-packages&#34;&gt;Lifecycle Management Package Development&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;using-kuksa-databroker-cli&#34;&gt;Using KUKSA Databroker CLI&lt;/h2&gt;
&lt;p&gt;A CLI tool is provided for interacting with a running instance of the KUKSA Databroker. It can be started by running the task &lt;code&gt;Local Runtime - VehicleDataBroker CLI&lt;/code&gt;(by pressing &lt;em&gt;F1&lt;/em&gt;, type &lt;em&gt;Run Task&lt;/em&gt; followed by &lt;code&gt;Local Runtime - VehicleDataBroker CLI&lt;/code&gt;). The &lt;em&gt;Runtime Local&lt;/em&gt; needs to be running for you to be able to use the tool.&lt;/p&gt;
&lt;h2 id=&#34;integrating-a-new-runtime-service-into-visual-studio-code-task&#34;&gt;Integrating a new runtime service into Visual Studio Code Task&lt;/h2&gt;
&lt;p&gt;Integration of a new runtime service can be done by duplicating one of the existing tasks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new service in either a new created &lt;em&gt;Package&lt;/em&gt; or branch/fork of 

&lt;a href=&#34;https://github.com/eclipse-velocitas/devenv-runtimes/tree/main&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;devenv-runtimes&lt;/a&gt;
 as already explained above&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;.vscode/tasks.json&lt;/code&gt;, duplicate section from task e.g. &lt;code&gt;Local Runtime - Up&lt;/code&gt;, &lt;code&gt;Local Runtime - Run VehicleApp&lt;/code&gt; or &lt;code&gt;Local Runtime - VehicleDataBroker CLI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Correct names in a new code block&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; &lt;code&gt;Problem Matcher&lt;/code&gt; defined in &lt;code&gt;tasks.json&lt;/code&gt; is a feature of the Visual Studio Code Task, to ensure that the process runs in background&lt;/li&gt;
&lt;li&gt;Run task using &lt;code&gt;[F1 -&amp;gt; Tasks: Run Task -&amp;gt; &amp;lt;Your new task label&amp;gt;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Task should be visible in Terminal section of Visual Studio Code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;task-codeblock-helper&#34;&gt;Task CodeBlock helper&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;lt;task_name&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;detail&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;lt;task_description&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;velocitas exec runtime-local &amp;lt;service_id&amp;gt; &amp;lt;args&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;presentation&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;close&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;reveal&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;never&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;problemMatcher&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Problem description:&lt;/strong&gt; When integrating new services into an existing dev environment, it is highly recommended to use the Visual Studio Code Task Feature.
A new service can be easily started by calling it from bash script, however restarting the same service might lead to port conflicts (GRPC Port or APP port). That can be easily avoided by using the Visual Studio Code Task Feature.&lt;/p&gt;
&lt;h3 id=&#34;codespaces&#34;&gt;Codespaces&lt;/h3&gt;
&lt;p&gt;If you are using Codespaces, remember that you are working on a remote agent. That&amp;rsquo;s why it could happen that the tasks are already running in the background. If that&amp;rsquo;s the case a new start of the tasks will fail, since the ports are already in use. Another possibility to check if the processes are already running, is to check which ports are already open. Check the Ports-tab to view all open ports (if not already open, hit &lt;code&gt;F1&lt;/code&gt; and enter &lt;code&gt;View: Toggle Ports&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tutorial: 

&lt;a href=&#34;/velocitas-docs/velocitas-docs//docs/tutorials/quickstart&#34;&gt;Quickstart&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Concept: 

&lt;a href=&#34;/velocitas-docs/velocitas-docs//docs/concepts/deployment_model/&#34;&gt;Deployment Model&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Concept: 

&lt;a href=&#34;/velocitas-docs/velocitas-docs//docs/concepts/deployment_model/vehicle_app_releases/&#34;&gt;Build and release process&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Kanto Runtime</title>
      <link>/velocitas-docs/docs/tutorials/vehicle_app_runtime/kanto_runtime/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      
      <guid>/velocitas-docs/docs/tutorials/vehicle_app_runtime/kanto_runtime/</guid>
      <description>
        
        
        &lt;p&gt;Besides starting the vehicle runtime components 

&lt;a href=&#34;/velocitas-docs/velocitas-docs//docs/tutorials/vehicle_app_runtime/local_runtime&#34;&gt;locally&lt;/a&gt;
, another way is to deploy them as containers using 

&lt;a href=&#34;https://eclipse.dev/kanto/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kanto&lt;/a&gt;
. To start the runtime, we provide VS Code &lt;em&gt;Tasks&lt;/em&gt;, a feature of Visual Studio Code. Additional information on tasks can be found 

&lt;a href=&#34;https://code.visualstudio.com/docs/editor/tasks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick Start:&lt;/strong&gt; Each step has a task that is defined in &lt;code&gt;/.vscode/tasks.json&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Core tasks (dependent on each other in the given order):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kanto - Runtime Up&lt;/code&gt;: Starts up the Kanto runtime and deploys the runtime components.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kanto - Build VehicleApp&lt;/code&gt;: Builds the &lt;em&gt;VehicleApp&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kanto - Deploy VehicleApp&lt;/code&gt;: Deploys the &lt;em&gt;VehicleApp&lt;/em&gt; as container in the Kanto runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional helper tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kanto - Deploy VehicleApp (without rebuild)&lt;/code&gt;: Deploys the &lt;em&gt;VehicleApp&lt;/em&gt; as container in the Kanto runtime but does not build it upfront. That requires, that the task &lt;code&gt;Kanto - Build VehicleApp&lt;/code&gt; has been executed once before.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kanto - Runtime Down&lt;/code&gt;: Stops the Kanto runtime and all deployed containers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Run as Bundle:&lt;/strong&gt; To orchestrate these tasks, you can use the task &lt;code&gt;Kanto - Deploy VehicleApp&lt;/code&gt;. This task runs the other tasks in the correct order. You can run this task by clicking &lt;code&gt;F1&lt;/code&gt; and choose &lt;code&gt;Tasks: Run task&lt;/code&gt;, then select &lt;code&gt;Kanto - Deploy VehicleApp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tasks Management:&lt;/strong&gt; Visual Studio Code offers various other commands concerning tasks like Start/Terminate/Restart/&amp;hellip; You can access them by pressing F1 and typing &lt;code&gt;task&lt;/code&gt;. A list with available task commands will appear.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logging:&lt;/strong&gt; Running tasks appear in the Terminals View of Visual Studio Code. From there, you can see the logs of each running task. More detailed logs can be found inside your workspace&amp;rsquo;s logs directory &lt;code&gt;./logs/*&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;kantui&#34;&gt;KantUI&lt;/h2&gt;
&lt;p&gt;The Leda team developed a tool to easily work with Kanto. It is similar to 

&lt;a href=&#34;https://k9scli.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;K9S&lt;/a&gt;
 for Kubernetes. You can find more details about KantUI in the 

&lt;a href=&#34;https://eclipse-leda.github.io/leda/docs/general-usage/utilities/kantui/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation of Leda&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;In the devcontainer KantUI is already installed and it can be started via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo kantui
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After starting the Kanto runtime with the mentioned tasks above, you will directly see all the running containers in KantUI. Now you could also take a look at the logs, delete or stop single containers. After you deployed your application to Kanto, this container will also show up and can be handled with KantUI.&lt;/p&gt;
&lt;h2 id=&#34;mounting-folders-for-feedercan&#34;&gt;Mounting folders for FeederCAN&lt;/h2&gt;
&lt;p&gt;Some applications (e.g. FeederCAN) might make it necessary to load custom files from a mounted volume.
All the files that are located in &lt;code&gt;[./config/feedercan](https://github.com/eclipse-velocitas/devenv-runtimes/tree/main/config/feedercan)&lt;/code&gt; will be automatically mounted into the container. In order to mount files to the directory that is accessible by the application, please refer to the deployment configuration file: 

&lt;a href=&#34;https://github.com/eclipse-velocitas/devenv-runtimes/blob/main/runtime-kanto/src/runtime/deployment/feedercan.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;runtime-kanto/src/runtime/deployment/feedercan.json&lt;/code&gt;&lt;/a&gt;
.&lt;/p&gt;
&lt;h3 id=&#34;uploading-custom-candump-file-to-feedercan&#34;&gt;Uploading custom candump file to FeederCAN&lt;/h3&gt;
&lt;p&gt;FeederCAN requires a candump file. A pre-defined candump file is already part of our delivery, however, if necessary, there is an option to upload a custom file by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creating/updating candump file with the name &lt;code&gt;candumpDefault.log&lt;/code&gt; in &lt;code&gt;./config/feedercan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restarting Kanto (execute the tasks &lt;code&gt;Kanto - Runtime Down&lt;/code&gt; and &lt;code&gt;Kanto - Runtime Up&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More information about the CAN Provider can be found 

&lt;a href=&#34;https://github.com/eclipse-kuksa/kuksa-can-provider&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Concept: 

&lt;a href=&#34;/velocitas-docs/velocitas-docs//docs/concepts/deployment_model&#34;&gt;Deployment Model&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Concept: 

&lt;a href=&#34;/velocitas-docs/velocitas-docs//docs/concepts/deployment_model/vehicle_app_releases&#34;&gt;Build and release process&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tutorial: 

&lt;a href=&#34;/velocitas-docs/velocitas-docs//docs/tutorials/vehicle_app_runtime/local_runtime&#34;&gt;Start runtime services locally&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tutorial: 

&lt;a href=&#34;/velocitas-docs/velocitas-docs//docs/tutorials/quickstart.md&#34;&gt;Quickstart&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
